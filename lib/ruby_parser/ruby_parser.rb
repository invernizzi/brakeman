#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.y/module_eval...', 'ruby_parser.y', 1798)

original_verbosity = $VERBOSE
$VERBOSE = nil

require "ruby_parser/ruby_lexer"
require "ruby_parser_extras"

$VERBOSE = original_verbosity

# Local Variables: **
# racc-token-length-max:14 **
# End: **
...end ruby_parser.y/module_eval...
##### State transition tables begin ###

clist = [
'-282,603,65,66,67,441,54,-282,-282,-282,59,60,-282,-282,-282,63,-282',
'61,62,64,250,251,68,69,739,541,-282,-282,249,31,30,91,90,92,93,-282',
'-282,-85,-282,-282,-282,-282,-282,500,44,707,738,95,94,85,53,87,86,88',
'89,96,97,650,83,84,500,41,42,40,-282,-282,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-282,-282,-282,629,-77,-282,-282,-282,204,560,-282,208',
'540,-282,55,56,-282,57,-282,245,-282,247,-282,43,-282,-282,-282,-282',
'-282,-282,-282,211,-282,-90,-282,404,81,75,77,78,79,80,629,734,725,76',
'82,-282,-282,-282,-282,-282,-282,500,253,-88,-83,-282,-282,-282,-282',
'-85,263,-87,-282,-282,-79,-282,-77,-64,102,75,-85,725,-85,101,263,-85',
'102,76,499,-90,-87,101,649,-77,-282,-282,730,-282,-282,-282,-282,-282',
'-84,102,500,499,-86,102,101,628,599,102,101,-77,-72,725,101,600,-77',
'500,-86,219,-90,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-89,-79,-282,-282,-282,-82,560,629,-83,102,-282,628,757',
'-85,101,-87,262,-282,-79,-282,296,-282,-282,-282,-282,-282,-282,-282',
'-75,-282,262,-282,-486,-77,102,-79,499,102,-79,101,199,200,101,-79,-282',
'-282,-84,-80,-290,-282,-86,759,-88,-437,-282,-290,-290,-290,-486,762',
'-290,-290,-290,-87,-290,-87,-76,102,-87,570,-78,-433,101,-430,-290,-290',
'263,102,-433,499,-430,-89,101,-290,-290,695,-290,-290,-290,-290,-290',
'763,102,-86,499,-86,694,101,-86,-83,777,-81,569,102,529,628,-483,764',
'101,199,200,-88,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,529,296,-290,-290,-290,-87,765,-290,570,268,-290,872',
'-352,-290,-490,-290,-85,-290,873,-290,-84,-290,-290,-290,-290,-290,-290',
'-290,529,-290,-425,-290,488,262,529,487,722,-425,531,530,542,569,-483',
'-276,-290,-290,-290,-290,-487,-290,-276,-276,-276,219,-290,-276,-276',
'-276,599,-276,531,530,532,-483,-490,600,-88,570,871,-276,-276,-490,529',
'-436,488,534,-486,493,-276,-276,-436,-276,-276,-276,-276,-276,-80,-425',
'531,530,536,475,-282,529,531,530,265,-490,641,-282,569,-490,642,676',
'-487,296,570,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276,-276',
'-276,-276,-276,-490,-284,-276,-276,-276,289,290,-276,-284,-436,-276',
'531,530,-276,-484,-276,-89,-276,569,-276,551,-276,-276,-276,-276,-276',
'-276,-276,-282,-276,-490,-276,531,530,527,102,506,-490,507,219,101,-328',
'-486,-490,-276,-276,-276,-276,-328,-276,-490,-490,-490,265,-276,-431',
'-490,-490,-284,-490,684,-77,-431,-490,-428,509,-85,725,-490,507,216',
'-428,510,-275,218,217,-484,721,-490,-490,-275,-490,-490,-490,-490,-490',
'716,-490,-432,102,-264,-437,-282,198,101,-432,-284,-484,-328,-282,102',
'-76,715,-284,-487,101,-84,-490,-490,-490,-490,-490,-490,-490,-490,-490',
'-490,-490,-490,-490,-490,-428,508,-490,-490,-490,478,557,-425,646,-275',
'-490,-75,479,-82,-425,644,-83,-490,-90,-490,475,-490,-490,-490,-490',
'-490,-490,-490,-282,-490,-490,-490,-284,-275,400,-283,-436,199,200,-282',
'-275,401,-283,-436,-490,-490,-282,-78,552,-490,711,-487,-86,-283,-490',
'-486,-486,-486,709,-486,-283,-81,402,-486,-486,645,-89,247,-486,441',
'-486,-486,-486,-486,-486,-486,-486,488,734,725,490,-486,-486,-486,-486',
'-486,-486,-486,219,-79,-275,402,-283,-436,-87,219,-282,-486,199,200',
'-486,-486,-486,-486,-486,-486,-486,-486,-486,-486,-283,-486,-486,196',
'-486,-486,-486,441,-283,216,197,524,469,218,217,-283,216,-428,525,470',
'218,217,214,215,-428,488,-486,696,490,-486,-486,256,-486,-486,704,-486',
'697,-486,257,-486,447,-486,447,663,-435,-434,661,660,662,-486,680,-435',
'-434,778,-486,-486,-486,-486,-486,-486,195,473,474,-486,-486,-283,65',
'66,67,468,54,678,-486,-86,59,60,670,669,580,63,632,61,62,64,250,251',
'68,69,667,666,670,669,249,31,30,91,90,92,93,219,769,770,367,771,96,97',
'369,368,44,199,200,95,94,85,53,87,86,88,89,96,97,580,83,84,507,41,42',
'40,199,200,216,624,580,790,218,217,214,215,104,105,106,107,108,296,618',
'265,265,204,617,238,208,481,461,55,56,795,57,604,245,-263,247,799,43',
'663,-72,802,661,660,662,743,211,804,602,238,823,81,75,77,78,79,80,807',
'601,296,76,82,65,66,67,596,54,580,219,253,59,60,219,811,219,63,219,61',
'62,64,250,251,68,69,667,666,670,669,249,280,284,91,90,92,93,667,666',
'670,669,104,105,106,107,108,44,265,815,95,94,85,53,87,86,88,89,96,97',
'823,83,84,816,41,42,40,104,105,106,107,108,296,550,-263,548,546,827',
'828,539,535,829,512,511,833,360,204,836,495,208,838,839,55,56,840,57',
'492,868,296,247,219,43,477,849,850,667,666,670,669,211,476,265,854,296',
'81,75,77,78,79,80,857,858,762,76,82,65,66,67,762,54,763,268,253,59,60',
'471,864,465,63,580,61,62,64,250,251,68,69,464,580,463,-63,249,280,284',
'91,90,92,93,265,874,447,441,438,435,406,405,403,44,371,370,95,94,85',
'53,87,86,88,89,96,97,886,83,84,350,41,42,40,219,-508,-508,-508,-508',
'225,227,617,347,-508,-508,326,296,288,287,895,233,234,896,204,762,898',
'208,580,238,55,56,580,57,902,865,216,247,222,43,218,217,214,215,226',
'224,220,211,221,194,193,192,81,75,77,78,79,80,191,98,3,76,82,65,66,67',
'580,54,,,253,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219',
'-508,-508,-508,-508,225,227,,,-508,-508,,,,,,233,234,,204,,,208,,,55',
'56,,57,,303,216,,222,43,218,217,214,215,226,224,220,211,221,,,,81,75',
'77,78,79,80,,,,76,82,-484,-484,-484,,-484,,,253,-484,-484,,,,-484,,-484',
'-484,-484,-484,-484,-484,-484,,-484,,,-484,-484,-484,-484,-484,-484',
'-484,,,,,,,,,,-484,,,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484',
',-484,-484,,-484,-484,-484,219,-508,-508,-508,-508,225,227,,,-508,-508',
',,,,,233,234,,-484,,,-484,-484,,-484,-484,,-484,,-484,216,-484,222,-484',
'218,217,214,215,226,224,220,-484,221,-484,,,-484,-484,-484,-484,-484',
'-484,,,,-484,-484,65,66,67,,54,,,-484,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,219,-508,-508,-508,-508,225,227,,,-508,-508',
',,,,,233,234,,204,,,208,,,55,56,,57,,781,216,247,222,43,218,217,214',
'215,226,224,220,211,221,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,',
',253,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,-508',
'-508,-508,-508,225,227,,,-508,-508,,,,,,233,234,,204,,,208,,,55,56,',
'57,,786,216,247,222,43,218,217,214,215,226,224,220,211,221,,,,81,75',
'77,78,79,80,,,,76,82,-483,-483,-483,,-483,,,253,-483,-483,,,,-483,,-483',
'-483,-483,-483,-483,-483,-483,,-483,,,-483,-483,-483,-483,-483,-483',
'-483,,,,,,,,,,-483,,,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483',
',-483,-483,,-483,-483,-483,219,223,228,229,230,225,227,,,231,232,,,',
',,233,234,,-483,,,-483,-483,,-483,-483,,-483,,-483,216,-483,222,-483',
'218,217,214,215,226,224,220,-483,221,-483,,,-483,-483,-483,-483,-483',
'-483,,,,-483,-483,65,66,67,,54,,,-483,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,219,-508,-508,-508,-508,225,227,,,-508,-508',
',,,,,233,234,,204,,,208,,,55,56,,57,,788,216,247,222,43,218,217,214',
'215,226,224,220,211,221,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,',
',253,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,223',
'228,229,230,225,227,235,236,231,232,,-508,-508,,,233,234,,204,,,208',
',,55,56,,57,,303,216,,222,43,218,217,214,215,226,224,220,211,221,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,253,59,60,,,,63,,61,62,64',
'250,251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87',
'86,88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233,234,,204,,,208',
',,55,56,,57,,572,216,247,222,43,218,217,214,215,,,220,211,221,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,253,59,60,,,,63,,61,62,64,250',
'251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233,234,,204,,,208,',
',55,56,,57,,900,216,247,222,43,218,217,214,215,,,220,211,221,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,253,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233,234,,204,,,208,,,55,56',
',57,,303,216,,222,43,218,217,214,215,,,220,211,221,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,253,59,60,,,,63,,61,62,64,250,251,68,69,',
',,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,219,,,,,,,,,,,,,,,,233,234,,204,,,208,,,55,56,,57,',
'245,216,247,222,43,218,217,214,215,,,220,211,221,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,253,59,60,,,,63,,61,62,64,250,251,68,69,,,,',
'249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,219,223,228,229,230,225,227,235,236,231,232,,-508,-508',
',,233,234,,204,,,208,,,55,56,,57,,245,216,247,222,43,218,217,214,215',
'226,224,220,211,221,,,,81,75,77,78,79,80,,,,76,82,-253,-253,-253,,-253',
',,253,-253,-253,,,,-253,,-253,-253,-253,-253,-253,-253,-253,,,,,-253',
'-253,-253,-253,-253,-253,-253,,,,,,,,,,-253,,,-253,-253,-253,-253,-253',
'-253,-253,-253,-253,-253,,-253,-253,,-253,-253,-253,219,223,228,229',
'230,225,227,235,,231,232,,,,,,233,234,,-253,,,-253,265,,-253,-253,,-253',
',-253,216,-253,222,-253,218,217,214,215,226,224,220,-253,221,,,,-253',
'-253,-253,-253,-253,-253,,,,-253,-253,65,66,67,,54,,,-253,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,,,,,233,234',
',204,,,208,,,55,56,,57,,245,216,247,222,43,218,217,214,215,,,,211,,',
',,81,75,77,78,79,80,,,,76,82,-253,-253,-253,,-253,,,253,-253,-253,,',
',-253,,-253,-253,-253,-253,-253,-253,-253,,,,,-253,-253,-253,-253,-253',
'-253,-253,,,,,,,,,,-253,,,-253,-253,-253,-253,-253,-253,-253,-253,-253',
'-253,,-253,-253,,-253,-253,-253,219,,,,,,,,,,,,,,,,233,234,,-253,,,-253',
'265,,-253,-253,,-253,,-253,216,-253,222,-253,218,217,214,215,,,,-253',
',,,,-253,-253,-253,-253,-253,-253,,,,-253,-253,65,66,67,,54,,,-253,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,',
'44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,219,,,,,,,,,,,,',
',,,233,234,,204,,,208,,,451,56,,57,,245,216,247,,43,218,217,214,215',
',,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,253,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,303,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,253,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,303,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,-488,-488,-488,,-488,,,253,-488,-488,,,,-488',
',-488,-488,-488,-488,-488,-488,-488,,,,,-488,-488,-488,-488,-488,-488',
'-488,,,,,,,,,,-488,,,-488,-488,-488,-488,-488,-488,-488,-488,-488,-488',
',-488,-488,,-488,-488,-488,,,,,,,,,,,,,,,,,,,,-488,,,-488,-488,,-488',
'-488,,-488,,-488,,-488,,-488,,,,,,,,-488,,,,,-488,-488,-488,-488,-488',
'-488,,,,-488,-488,65,66,67,,54,,,-488,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,253',
'59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,31,30,91,90,92,93,,,,,,',
',,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,',
',,,,,,204,,,208,,,55,56,,57,,303,,,,43,,,,,,,,211,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,253,59,60,,,,63,,61,62,64,26,27,68,69,,,',
',25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,590,,247',
',43,,,,,,,,21,,,,-506,81,75,77,78,79,80,-506,-506,-506,76,82,-506,-506',
'-506,,-506,,,253,,,,,,,-506,,,,,,,,,-506,-506,,-506,-506,-506,-506,-506',
',,,,,,,,,,663,-506,,661,660,662,,,-506,-506,-506,,,-506,-506,-506,663',
'-506,,661,660,662,-506,,,,,-506,,-506,,,,,265,-506,-506,-506,654,-506',
'-506,-506,-506,-506,,667,666,670,669,,,,,,654,,-506,,,,,667,666,670',
'669,,,,,-506,,-506,,,-506,,-506,,,,,,,-506,,,,,265,-506,,,,,,,,,,,,',
',,,,,,,,-506,,,,,,,,65,66,67,,54,-506,,-506,59,60,-506,,,63,,61,62,64',
'250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55',
'56,,57,,576,,247,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,253,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,572,,247,,43,,,,,,,,211,,',
',,81,75,77,78,79,80,,,,76,82,-489,-489,-489,,-489,,,253,-489,-489,,',
',-489,,-489,-489,-489,-489,-489,-489,-489,,,,,-489,-489,-489,-489,-489',
'-489,-489,,,,,,,,,,-489,,,-489,-489,-489,-489,-489,-489,-489,-489,-489',
'-489,,-489,-489,,-489,-489,-489,,,,,,,,,,,,,,,,,,,,-489,,,-489,-489',
',-489,-489,,-489,,-489,,-489,,-489,,,,,,,,-489,,,,,-489,-489,-489,-489',
'-489,-489,,,,-489,-489,65,66,67,,54,,,-489,59,60,,,,63,,61,62,64,250',
'251,68,69,,,,,249,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57',
',303,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
'253,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,253,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,547,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,219,223,228,229,230,225,227,235,236,231,232,',
'212,213,,,233,234,,204,,,208,,,55,56,,57,,,216,,222,43,218,217,214,215',
'226,224,220,21,221,,,,81,75,77,78,79,80,,,,76,82,102,237,,-219,,101',
'65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,547,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,219,223,228,229,230,225,227,235,236,231,232,,212,213,,,233',
'234,,39,,,33,,,55,56,,57,,35,216,,222,43,218,217,214,215,226,224,220',
'21,221,,,,81,75,77,78,79,80,,,,76,82,,237,,,,360,8,65,66,67,10,54,,',
',59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,',
',,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79',
'80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,',
',,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,270,,,55,56,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,',
',,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,',
'63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,',
',43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,',
',,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,',
'63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,270,,,55,56,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,270,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,',
',43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,',
',,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,',
'63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,',
',43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,',
',,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,281',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,,,285,,,,,,,,,,,,,,,,,,,,320',
',,33,,,55,56,,57,,35,,,,,,,,,,,699,,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,',
'20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,',
',,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,',
',,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,',
',55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,',
',,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,',
',,,,,,,,,,204,,,208,,,55,56,,57,,378,,,,43,,,,,,,,211,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,',
',,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,742',
',,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41',
'42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,378,,,,43,,,,,,,,211',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55',
'56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,',
',,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,378,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
',,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,',
',95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204',
',,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,',
',,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,280,284,91,90,92,93,,,,,,,,,,281,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,,,285,,,,,,,,,,,,,,,,,,,,278,,,208,,,55,56,,57,,,,,,,,,,',
',,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55',
'56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,',
',25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68',
'69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,281,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,,,285,,,,,,,,,,,,,,,,,,,,278,,,208,,,55,56,,57,,,,',
',,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,10,54,,,,59,60,,,',
'63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251',
'68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,',
'851,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,',
'59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,',
',,,,,281,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,285,,,,,,,,,,,,,',
',,,,,,278,,,275,,,55,56,,57,,274,,,,,,,,,,,,,,,,,81,75,77,78,79,80,',
',,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,281,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,,,285,,,,,,,,,,,,,,,,,,,,845,,,208,',
',55,56,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,204,,,208,481,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,',
',,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,156,167,157,180,153,173,163,162,,,178,161,160,155',
'181,,,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152',
'171,170,183,184,185,186,187,151,158,149,150,147,148,112,114,111,,113',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,,146,81',
'156,167,157,180,153,173,163,162,,82,178,161,160,155,181,,,165,154,168',
'172,174,166,159,,,175,182,177,176,169,179,164,152,171,170,183,184,185',
'186,187,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,,,146,81,,,65,66,67,,54,,,82,59',
'60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249',
'280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,',
',55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,',
'20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,',
',,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,',
'20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,',
',25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,',
',211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,683,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,',
',,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284',
'91,90,92,93,,,,,,,,,,281,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,285',
',,,,,,,,,,,,,,,,,,,320,,,33,,,55,56,,57,,35,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,',
',208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91',
'90,92,93,,,,,,,,,,281,,,95,94,513,53,87,86,514,89,96,97,,83,84,,,,285',
',,,,,,,,,,,,,,,,,,,515,,,208,,,55,56,,57,,,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69',
',,,,249,280,284,91,90,92,93,,,,,,,,,,281,,,95,94,513,53,87,86,514,89',
'96,97,,83,84,,,,285,,,,,,,,,,,,,,,,,,,,515,,,208,,,55,56,,57,,,,,,,',
',,,,,,,,,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162',
',,178,161,160,155,181,,,165,154,168,172,174,166,159,,,175,182,177,176',
'169,179,164,152,171,170,183,184,185,186,187,151,158,149,150,147,148',
'112,114,,,113,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144',
'145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121',
',122,,,146,81,,,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43',
',,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208',
',,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,',
'20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,',
',,,249,280,284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,620,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280,284',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,',
',43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,250,251,68,69,,,,,249,280,284,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162,,,178,161,160',
'155,181,,,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164',
'152,171,170,183,184,185,186,187,151,158,149,150,147,148,112,114,,,113',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,,146,81',
',,65,66,67,,54,,,82,59,60,,,,63,,61,62,64,250,251,68,69,,,,,249,280',
'284,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,,,,,,,,,,,,,,,,,,,,204,,,208,,,55,56,,57,,,,,,43,,,,,,,,211',
',,,,81,75,77,78,79,80,,,,76,82,156,167,157,180,153,173,163,162,,,178',
'161,160,155,181,,,165,154,168,172,174,166,159,,,175,182,177,334,333',
'335,332,152,171,170,183,184,185,186,187,151,158,149,150,330,331,328',
'114,87,86,329,89,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144',
'145,132,133,,,,,,340,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,,,146,156,167,157,180,153,173,163,162,,,178,161,160,155,181',
',,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152,171',
'170,183,184,185,186,187,151,158,149,150,147,148,112,114,357,356,113',
'358,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133',
',,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,,,146',
'156,167,157,180,153,173,163,162,,,178,161,160,155,181,,,165,154,168',
'172,174,166,159,,,175,182,177,176,169,179,164,152,171,170,183,184,185',
'186,187,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,892,394,146,,893,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,390,394,146,,392,,,,,',
',,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,',
',,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,745,394,146',
',746,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132',
'133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,636',
'388,146,,637,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144',
'145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121',
',122,385,388,146,,386,,,,,,,,142,143,,140,124,125,126,,129,131,,,127',
',,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130',
'128,121,,122,444,388,146,,445,,,,,,,,142,143,,140,124,125,126,,129,131',
',,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,638,394,146,,639,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134',
'135,130,128,121,,122,563,394,146,,564,,,,,,,,142,143,,140,124,125,126',
',129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139',
'138,134,135,130,128,121,,122,444,388,146,,445,,,,,,,,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,444,388,146,,445,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,,,146,219,223,228,229',
'230,225,227,235,236,231,232,,212,213,,,233,234,,,,,,,,,,,,,,216,,222',
',218,217,214,215,226,224,220,,221,,,,,,,609,394,,,610,,,,,237,,580,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,',
'137,136,,123,141,139,138,134,135,130,128,121,,122,606,388,146,,607,',
',,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,',
',,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,561,388',
'146,,562,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
'563,394,146,,564,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,890,388,146,,891,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,444,388,146,,445,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139,138,134',
'135,130,128,121,,122,444,388,146,,445,,,,,,,,142,143,,140,124,125,126',
',129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123,141,139',
'138,134,135,130,128,121,,122,,,146,219,223,228,229,230,225,227,235,236',
'231,232,,212,213,,,233,234,,,,-219,,,,,,,,,,216,,222,,218,217,214,215',
'226,224,220,,221,,,,,,,561,388,,,562,,,,,237,,-219,142,143,,140,124',
'125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,137,136,,123',
'141,139,138,134,135,130,128,121,,122,,,146,219,223,228,229,230,225,227',
'235,236,231,232,,212,213,,,233,234,,,,,,,,,,,,,,216,,222,,218,217,214',
'215,226,224,220,,221,,219,223,228,229,230,225,227,235,236,231,232,,212',
'213,237,567,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220',
',221,219,223,228,229,230,225,227,235,236,231,232,,212,213,,237,233,234',
',,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,,221,219,223,228',
'229,230,225,227,235,236,231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216',
',222,,218,217,214,215,226,224,220,,221,219,223,228,229,230,225,227,235',
'236,231,232,,212,213,296,237,233,234,,,,,,,,,,,,,,216,,222,,218,217',
'214,215,226,224,220,,221,219,223,228,229,230,225,227,235,236,231,232',
',212,213,,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224',
'220,,221,219,223,228,229,230,225,227,235,236,231,232,,212,213,,237,233',
'234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,,221,219,223',
'228,229,230,225,227,235,236,231,232,,212,213,,237,233,234,,,,,,,,,,',
',,,216,,222,,218,217,214,215,226,224,220,,221,219,223,228,229,230,225',
'227,235,236,231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216,,222,,218',
'217,214,215,226,224,220,,221,219,223,228,229,230,225,227,235,236,231',
'232,,212,213,,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226',
'224,220,,221,219,223,228,229,230,225,227,235,236,231,232,,212,213,,237',
'233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,,221,219',
'223,228,229,230,225,227,235,236,231,232,,212,213,,237,233,234,,,,,,',
',,,,,,,216,,222,,218,217,214,215,226,224,220,,221,219,223,228,229,230',
'225,227,235,236,231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216,,222',
',218,217,214,215,226,224,220,,221,219,223,228,229,230,225,227,235,236',
'231,232,,212,213,,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215',
'226,224,220,,221,219,223,228,229,230,225,227,235,236,231,232,,212,213',
'296,237,233,234,,,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,',
'221,219,223,228,229,230,225,227,235,236,231,232,,212,213,,237,233,234',
',,,,,,,,,,,,,216,,222,,218,217,214,215,226,224,220,,221,,,,,,,,,,,,',
',,,237' ]
        racc_action_table = arr = Array.new(23770, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'564,462,25,25,25,588,25,564,564,564,25,25,564,564,564,25,564,25,25,25',
'25,25,25,25,633,351,564,564,25,25,25,25,25,25,25,564,564,890,564,564',
'564,564,564,741,25,588,631,25,25,25,25,25,25,25,25,25,25,519,25,25,803',
'25,25,25,564,564,564,564,564,564,564,564,564,564,564,564,564,564,502',
'606,564,564,564,25,564,564,25,351,564,25,25,564,25,564,25,564,25,564',
'25,564,564,564,564,564,564,564,25,564,321,564,205,25,25,25,25,25,25',
'744,875,875,25,25,564,564,564,564,392,564,798,25,564,318,564,392,392',
'392,636,282,637,392,392,607,392,606,603,813,73,890,625,890,813,58,890',
'741,73,741,205,891,741,519,606,392,392,619,392,392,392,392,392,743,803',
'312,803,638,502,803,502,457,519,502,606,603,616,519,457,606,311,892',
'614,321,392,392,392,392,392,392,392,392,392,392,392,392,392,392,511',
'607,392,392,392,321,392,503,318,744,392,744,656,636,744,637,282,392',
'607,392,457,392,392,392,392,392,392,392,318,392,58,392,638,636,798,637',
'798,650,607,798,673,673,650,607,392,392,743,392,31,392,638,657,392,203',
'392,31,31,31,892,658,31,31,31,891,31,891,743,655,891,586,638,332,655',
'333,31,31,29,312,332,312,333,511,312,31,31,562,31,31,31,31,31,663,311',
'892,311,892,561,311,892,203,697,511,586,503,353,503,513,668,503,615',
'615,639,31,31,31,31,31,31,31,31,31,31,31,31,31,31,344,673,31,31,31,562',
'671,31,453,31,31,844,29,31,745,31,561,31,844,31,697,31,31,31,31,31,31',
'31,348,31,513,31,301,29,537,301,615,513,353,353,353,453,513,53,31,31',
'31,31,639,31,53,53,53,613,31,53,53,53,719,53,344,344,344,513,745,719',
'639,454,844,53,53,745,346,843,305,346,745,305,53,53,843,53,53,53,53',
'53,639,513,348,348,348,403,610,342,537,537,611,745,515,610,454,609,515',
'537,610,719,433,53,53,53,53,53,53,53,53,53,53,53,53,53,53,745,721,53',
'53,53,40,40,53,721,843,53,346,346,53,514,53,403,53,433,53,385,53,53',
'53,53,53,53,53,610,53,609,53,342,342,342,5,316,609,316,409,5,45,609',
'390,53,53,53,53,45,53,390,390,390,608,53,334,390,390,721,390,550,385',
'334,609,514,319,385,852,390,852,409,514,319,846,409,409,514,605,390',
'390,846,390,390,390,390,390,598,609,335,752,682,38,893,17,752,335,902',
'514,45,893,315,550,597,902,893,315,550,390,390,390,390,390,390,390,390',
'390,390,390,390,390,390,514,319,390,390,390,291,390,328,517,846,390',
'38,291,17,328,517,38,390,17,390,288,390,390,390,390,390,390,390,893',
'390,390,390,902,279,202,642,276,651,651,746,279,202,642,276,390,390',
'746,390,386,390,592,746,390,874,390,563,563,563,589,563,874,288,291',
'563,563,517,288,580,563,578,563,563,563,563,563,563,563,308,623,623',
'308,563,563,563,563,563,563,563,410,386,279,202,642,276,386,429,746',
'563,298,298,563,563,563,563,563,563,563,563,563,563,874,563,563,16,563',
'563,563,575,471,410,16,337,277,410,410,471,429,329,337,277,429,429,429',
'429,329,302,563,563,302,563,563,28,563,563,573,563,565,563,28,563,558',
'563,553,654,330,331,654,654,654,563,545,330,331,700,563,563,563,563',
'563,563,16,285,285,563,563,471,268,268,268,277,268,541,563,563,268,268',
'762,762,702,268,505,268,268,268,268,268,268,268,654,654,654,654,268',
'268,268,268,268,268,268,428,674,674,111,674,674,674,111,111,268,310',
'310,268,268,268,268,268,268,268,268,268,268,705,268,268,504,268,268',
'268,18,18,428,498,710,712,428,428,428,428,7,7,7,7,7,484,483,717,718',
'268,482,720,268,472,268,268,268,723,268,467,268,726,268,727,268,757',
'463,732,757,757,757,635,268,735,460,459,858,268,268,268,268,268,268',
'740,458,456,268,268,836,836,836,455,836,439,414,268,836,836,413,748',
'412,836,411,836,836,836,836,836,836,836,757,757,757,757,836,836,836',
'836,836,836,836,858,858,858,858,359,359,359,359,359,836,391,753,836',
'836,836,836,836,836,836,836,836,836,759,836,836,754,836,836,836,109',
'109,109,109,109,755,384,380,377,372,767,773,350,347,779,322,320,784',
'317,836,787,306,836,791,792,836,836,793,836,304,836,300,836,293,836',
'290,805,806,759,759,759,759,836,289,284,812,281,836,836,836,836,836',
'836,817,818,819,836,836,833,833,833,822,833,823,280,836,833,833,278',
'831,273,833,834,833,833,833,833,833,833,833,272,837,271,269,833,833',
'833,833,833,833,833,261,845,258,248,244,243,207,206,204,833,190,188',
'833,833,833,833,833,833,833,833,833,833,866,833,833,80,833,833,833,426',
'426,426,426,426,426,426,870,79,426,426,65,44,39,37,880,426,426,881,833',
'882,883,833,884,23,833,833,887,833,889,833,426,833,426,833,426,426,426',
'426,426,426,426,833,426,15,14,13,833,833,833,833,833,833,12,3,1,833',
'833,508,508,508,903,508,,,833,508,508,,,,508,,508,508,508,508,508,508',
'508,,,,,508,508,508,508,508,508,508,,,,,,,,,,508,,,508,508,508,508,508',
'508,508,508,508,508,,508,508,,508,508,508,427,427,427,427,427,427,427',
',,427,427,,,,,,427,427,,508,,,508,,,508,508,,508,,508,427,,427,508,427',
'427,427,427,427,427,427,508,427,,,,508,508,508,508,508,508,,,,508,508',
'88,88,88,,88,,,508,88,88,,,,88,,88,88,88,88,88,88,88,,88,,,88,88,88',
'88,88,88,88,,,,,,,,,,88,,,88,88,88,88,88,88,88,88,88,88,,88,88,,88,88',
'88,425,425,425,425,425,425,425,,,425,425,,,,,,425,425,,88,,,88,88,,88',
'88,,88,,88,425,88,425,88,425,425,425,425,425,425,425,88,425,88,,,88',
'88,88,88,88,88,,,,88,88,704,704,704,,704,,,88,704,704,,,,704,,704,704',
'704,704,704,704,704,,,,,704,704,704,704,704,704,704,,,,,,,,,,704,,,704',
'704,704,704,704,704,704,704,704,704,,704,704,,704,704,704,424,424,424',
'424,424,424,424,,,424,424,,,,,,424,424,,704,,,704,,,704,704,,704,,704',
'424,704,424,704,424,424,424,424,424,424,424,704,424,,,,704,704,704,704',
'704,704,,,,704,704,707,707,707,,707,,,704,707,707,,,,707,,707,707,707',
'707,707,707,707,,,,,707,707,707,707,707,707,707,,,,,,,,,,707,,,707,707',
'707,707,707,707,707,707,707,707,,707,707,,707,707,707,418,418,418,418',
'418,418,418,,,418,418,,,,,,418,418,,707,,,707,,,707,707,,707,,707,418',
'707,418,707,418,418,418,418,418,418,418,707,418,,,,707,707,707,707,707',
'707,,,,707,707,85,85,85,,85,,,707,85,85,,,,85,,85,85,85,85,85,85,85',
',85,,,85,85,85,85,85,85,85,,,,,,,,,,85,,,85,85,85,85,85,85,85,85,85',
'85,,85,85,,85,85,85,430,430,430,430,430,430,430,,,430,430,,,,,,430,430',
',85,,,85,85,,85,85,,85,,85,430,85,430,85,430,430,430,430,430,430,430',
'85,430,85,,,85,85,85,85,85,85,,,,85,85,709,709,709,,709,,,85,709,709',
',,,709,,709,709,709,709,709,709,709,,,,,709,709,709,709,709,709,709',
',,,,,,,,,709,,,709,709,709,709,709,709,709,709,709,709,,709,709,,709',
'709,709,423,423,423,423,423,423,423,,,423,423,,,,,,423,423,,709,,,709',
',,709,709,,709,,709,423,709,423,709,423,423,423,423,423,423,423,709',
'423,,,,709,709,709,709,709,709,,,,709,709,871,871,871,,871,,,709,871',
'871,,,,871,,871,871,871,871,871,871,871,,,,,871,871,871,871,871,871',
'871,,,,,,,,,,871,,,871,871,871,871,871,871,871,871,871,871,,871,871',
',871,871,871,408,408,408,408,408,408,408,408,408,408,408,,408,408,,',
'408,408,,871,,,871,,,871,871,,871,,871,408,,408,871,408,408,408,408',
'408,408,408,871,408,,,,871,871,871,871,871,871,,,,871,871,601,601,601',
',601,,,871,601,601,,,,601,,601,601,601,601,601,601,601,,,,,601,601,601',
'601,601,601,601,,,,,,,,,,601,,,601,601,601,601,601,601,601,601,601,601',
',601,601,,601,601,601,419,,,,,,,,,,,,,,,,419,419,,601,,,601,,,601,601',
',601,,601,419,601,419,601,419,419,419,419,,,419,601,419,,,,601,601,601',
'601,601,601,,,,601,601,886,886,886,,886,,,601,886,886,,,,886,,886,886',
'886,886,886,886,886,,,,,886,886,886,886,886,886,886,,,,,,,,,,886,,,886',
'886,886,886,886,886,886,886,886,886,,886,886,,886,886,886,420,,,,,,',
',,,,,,,,,420,420,,886,,,886,,,886,886,,886,,886,420,886,420,886,420',
'420,420,420,,,420,886,420,,,,886,886,886,886,886,886,,,,886,886,645',
'645,645,,645,,,886,645,645,,,,645,,645,645,645,645,645,645,645,,,,,645',
'645,645,645,645,645,645,,,,,,,,,,645,,,645,645,645,645,645,645,645,645',
'645,645,,645,645,,645,645,645,422,,,,,,,,,,,,,,,,422,422,,645,,,645',
',,645,645,,645,,645,422,,422,645,422,422,422,422,,,422,645,422,,,,645',
'645,645,645,645,645,,,,645,645,26,26,26,,26,,,645,26,26,,,,26,,26,26',
'26,26,26,26,26,,,,,26,26,26,26,26,26,26,,,,,,,,,,26,,,26,26,26,26,26',
'26,26,26,26,26,,26,26,,26,26,26,421,,,,,,,,,,,,,,,,421,421,,26,,,26',
',,26,26,,26,,26,421,26,421,26,421,421,421,421,,,421,26,421,,,,26,26',
'26,26,26,26,,,,26,26,27,27,27,,27,,,26,27,27,,,,27,,27,27,27,27,27,27',
'27,,,,,27,27,27,27,27,27,27,,,,,,,,,,27,,,27,27,27,27,27,27,27,27,27',
'27,,27,27,,27,27,27,407,407,407,407,407,407,407,407,407,407,407,,407',
'407,,,407,407,,27,,,27,,,27,27,,27,,27,407,27,407,27,407,407,407,407',
'407,407,407,27,407,,,,27,27,27,27,27,27,,,,27,27,387,387,387,,387,,',
'27,387,387,,,,387,,387,387,387,387,387,387,387,,,,,387,387,387,387,387',
'387,387,,,,,,,,,,387,,,387,387,387,387,387,387,387,387,387,387,,387',
'387,,387,387,387,431,431,431,431,431,431,431,431,,431,431,,,,,,431,431',
',387,,,387,387,,387,387,,387,,387,431,387,431,387,431,431,431,431,431',
'431,431,387,431,,,,387,387,387,387,387,387,,,,387,387,265,265,265,,265',
',,387,265,265,,,,265,,265,265,265,265,265,265,265,,,,,265,265,265,265',
'265,265,265,,,,,,,,,,265,,,265,265,265,265,265,265,265,265,265,265,',
'265,265,,265,265,265,416,,,,,,,,,,,,,,,,416,416,,265,,,265,,,265,265',
',265,,265,416,265,416,265,416,416,416,416,,,,265,,,,,265,265,265,265',
'265,265,,,,265,265,30,30,30,,30,,,265,30,30,,,,30,,30,30,30,30,30,30',
'30,,,,,30,30,30,30,30,30,30,,,,,,,,,,30,,,30,30,30,30,30,30,30,30,30',
'30,,30,30,,30,30,30,415,,,,,,,,,,,,,,,,415,415,,30,,,30,30,,30,30,,30',
',30,415,30,415,30,415,415,415,415,,,,30,,,,,30,30,30,30,30,30,,,,30',
'30,259,259,259,,259,,,30,259,259,,,,259,,259,259,259,259,259,259,259',
',,,,259,259,259,259,259,259,259,,,,,,,,,,259,,,259,259,259,259,259,259',
'259,259,259,259,,259,259,,259,259,259,417,,,,,,,,,,,,,,,,417,417,,259',
',,259,,,259,259,,259,,259,417,259,,259,417,417,417,417,,,,259,,,,,259',
'259,259,259,259,259,,,,259,259,195,195,195,,195,,,259,195,195,,,,195',
',195,195,195,195,195,195,195,,,,,195,195,195,195,195,195,195,,,,,,,',
',,195,,,195,195,195,195,195,195,195,195,195,195,,195,195,,195,195,195',
',,,,,,,,,,,,,,,,,,,195,,,195,,,195,195,,195,,195,,,,195,,,,,,,,195,',
',,,195,195,195,195,195,195,,,,195,195,468,468,468,,468,,,195,468,468',
',,,468,,468,468,468,468,468,468,468,,,,,468,468,468,468,468,468,468',
',,,,,,,,,468,,,468,468,468,468,468,468,468,468,468,468,,468,468,,468',
'468,468,,,,,,,,,,,,,,,,,,,,468,,,468,,,468,468,,468,,468,,,,468,,,,',
',,,468,,,,,468,468,468,468,468,468,,,,468,468,394,394,394,,394,,,468',
'394,394,,,,394,,394,394,394,394,394,394,394,,,,,394,394,394,394,394',
'394,394,,,,,,,,,,394,,,394,394,394,394,394,394,394,394,394,394,,394',
'394,,394,394,394,,,,,,,,,,,,,,,,,,,,394,,,394,394,,394,394,,394,,394',
',394,,394,,,,,,,,394,,,,,394,394,394,394,394,394,,,,394,394,57,57,57',
',57,,,394,57,57,,,,57,,57,57,57,57,57,57,57,,,,,57,57,57,57,57,57,57',
',,,,,,,,,57,,,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,,,,',
',,,,,,,,,,,,57,,,57,,,57,57,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,57',
'57,,,,57,57,56,56,56,,56,,,57,56,56,,,,56,,56,56,56,56,56,56,56,,,,',
'56,56,56,56,56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56',
'56,,56,56,56,,,,,,,,,,,,,,,,,,,,56,,,56,,,56,56,,56,,56,,,,56,,,,,,',
',56,,,,,56,56,56,56,56,56,,,,56,56,451,451,451,,451,,,56,451,451,,,',
'451,,451,451,451,451,451,451,451,,,,,451,451,451,451,451,451,451,,,451',
',,,,,,451,,,451,451,451,451,451,451,451,451,451,451,,451,451,,451,451',
'451,,,,,,,,,,,,,,,,,,,,451,,,451,,,451,451,,451,,451,,451,,451,,,,,',
',,451,,,,446,451,451,451,451,451,451,446,446,446,451,451,446,446,446',
',446,,,451,,,,,,,446,,,,,,,,,446,446,,446,446,446,446,446,,,,,,,,,,',
'826,443,,826,826,826,,,443,443,443,,,443,443,443,522,443,,522,522,522',
'446,,,,,443,,446,,,,,446,446,443,443,826,443,443,443,443,443,,826,826',
'826,826,,,,,,522,,446,,,,,522,522,522,522,,,,,446,,446,,,446,,443,,',
',,,,443,,,,,443,443,,,,,,,,,,,,,,,,,,,,,443,,,,,,,,438,438,438,,438',
'443,,443,438,438,443,,,438,,438,438,438,438,438,438,438,,,,,438,438',
'438,438,438,438,438,,,,,,,,,,438,,,438,438,438,438,438,438,438,438,438',
'438,,438,438,,438,438,438,,,,,,,,,,,,,,,,,,,,438,,,438,,,438,438,,438',
',438,,438,,438,,,,,,,,438,,,,,438,438,438,438,438,438,,,,438,438,435',
'435,435,,435,,,438,435,435,,,,435,,435,435,435,435,435,435,435,,,,,435',
'435,435,435,435,435,435,,,,,,,,,,435,,,435,435,435,435,435,435,435,435',
'435,435,,435,435,,435,435,435,,,,,,,,,,,,,,,,,,,,435,,,435,,,435,435',
',435,,435,,435,,435,,,,,,,,435,,,,,435,435,435,435,435,435,,,,435,435',
'395,395,395,,395,,,435,395,395,,,,395,,395,395,395,395,395,395,395,',
',,,395,395,395,395,395,395,395,,,,,,,,,,395,,,395,395,395,395,395,395',
'395,395,395,395,,395,395,,395,395,395,,,,,,,,,,,,,,,,,,,,395,,,395,395',
',395,395,,395,,395,,395,,395,,,,,,,,395,,,,,395,395,395,395,395,395',
',,,395,395,402,402,402,,402,,,395,402,402,,,,402,,402,402,402,402,402',
'402,402,,,,,402,402,402,402,402,402,402,,,,,,,,,,402,,,402,402,402,402',
'402,402,402,402,402,402,,402,402,,402,402,402,,,,,,,,,,,,,,,,,,,,402',
',,402,,,402,402,,402,,402,,,,402,,,,,,,,402,,,,,402,402,402,402,402',
'402,,,,402,402,490,490,490,,490,,,402,490,490,,,,490,,490,490,490,490',
'490,490,490,,,,,490,490,490,490,490,490,490,,,,,,,,,,490,,,490,490,490',
'490,490,490,490,490,490,490,,490,490,,490,490,490,,,,,,,,,,,,,,,,,,',
',490,,,490,,,490,490,,490,,,,,,490,,,,,,,,490,,,,,490,490,490,490,490',
'490,,,,490,490,63,63,63,,63,,,490,63,63,,,,63,,63,63,63,63,63,63,63',
',,,,63,63,63,63,63,63,63,,,63,,,,,375,,63,,,63,63,63,63,63,63,63,63',
'63,63,,63,63,,63,63,63,375,375,375,375,375,375,375,375,375,375,375,',
'375,375,,,375,375,,63,,,63,,,63,63,,63,,,375,,375,63,375,375,375,375',
'375,375,375,63,375,,,,63,63,63,63,63,63,,,,63,63,63,375,,375,,63,100',
'100,100,100,100,,,,100,100,,,,100,,100,100,100,100,100,100,100,,,,,100',
'100,100,100,100,100,100,,,100,,,,,566,100,100,100,100,100,100,100,100',
'100,100,100,100,100,100,,100,100,,100,100,100,566,566,566,566,566,566',
'566,566,566,566,566,,566,566,,,566,566,,100,,,100,,,100,100,,100,,100',
'566,,566,100,566,566,566,566,566,566,566,100,566,,,,100,100,100,100',
'100,100,,,,100,100,,566,,,,100,506,506,506,506,506,506,,,,506,506,,',
',506,,506,506,506,506,506,506,506,,,,,506,506,506,506,506,506,506,,',
'506,,,,,,506,506,506,506,506,506,506,506,506,506,506,506,506,506,,506',
'506,,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,506,,506,,',
',506,,,,,,,,506,,,,,506,506,506,506,506,506,,,,506,506,33,33,33,33,33',
'33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,33,33,33,33,33,33,33,,,33',
',,,,,33,33,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,',
',,,,,,,,,,,,,,,33,,,33,,,33,33,,33,,33,,,,33,,,,,,,,33,,,,,33,33,33',
'33,33,33,,,,33,33,714,714,714,714,714,714,,,,714,714,,,,714,,714,714',
'714,714,714,714,714,,,,,714,714,714,714,714,714,714,,,714,,,,,,714,714',
'714,714,714,714,714,714,714,714,714,714,714,714,,714,714,,714,714,714',
',,,,,,,,,,,,,,,,,,,714,,,714,,,714,714,,714,,714,,,,714,,,,,,,,714,',
',,,714,714,714,714,714,714,,,,714,714,749,749,749,749,749,749,,,,749',
'749,,,,749,,749,749,749,749,749,749,749,,,,,749,749,749,749,749,749',
'749,,,749,,,,,,749,749,749,749,749,749,749,749,749,749,749,749,749,749',
',749,749,,749,749,749,,,,,,,,,,,,,,,,,,,,749,,,749,,,749,749,,749,,749',
',,,749,,,,,,,,749,,,,,749,749,749,749,749,749,,,,749,749,713,713,713',
'713,713,713,,,,713,713,,,,713,,713,713,713,713,713,713,713,,,,,713,713',
'713,713,713,713,713,,,713,,,,,,713,713,713,713,713,713,713,713,713,713',
'713,713,713,713,,713,713,,713,713,713,,,,,,,,,,,,,,,,,,,,713,,,713,',
',713,713,,713,,713,,,,713,,,,,,,,713,,,,,713,713,713,713,713,713,,,',
'713,713,371,371,371,371,371,371,,,,371,371,,,,371,,371,371,371,371,371',
'371,371,,,,,371,371,371,371,371,371,371,,,371,,,,,,371,371,371,371,371',
'371,371,371,371,371,371,371,371,371,,371,371,,371,371,371,,,,,,,,,,',
',,,,,,,,,371,,,371,,,371,371,,371,,371,,,,371,,,,,,,,371,,,,,371,371',
'371,371,371,371,,,,371,371,783,783,783,783,783,783,,,,783,783,,,,783',
',783,783,783,783,783,783,783,,,,,783,783,783,783,783,783,783,,,783,',
',,,,783,783,783,783,783,783,783,783,783,783,783,783,783,783,,783,783',
',783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,783,,783,,,,783',
',,,,,,,783,,,,,783,783,783,783,783,783,,,,783,783,795,795,795,795,795',
'795,,,,795,795,,,,795,,795,795,795,795,795,795,795,,,,,795,795,795,795',
'795,795,795,,,795,,,,,,795,795,795,795,795,795,795,795,795,795,795,795',
'795,795,,795,795,,795,795,795,,,,,,,,,,,,,,,,,,,,795,,,795,,,795,795',
',795,,795,,,,795,,,,,,,,795,,,,,795,795,795,795,795,795,,,,795,795,497',
'497,497,497,497,497,,,,497,497,,,,497,,497,497,497,497,497,497,497,',
',,,497,497,497,497,497,497,497,,,497,,,,,,497,497,497,497,497,497,497',
'497,497,497,497,497,497,497,,497,497,,497,497,497,,,,,,,,,,,,,,,,,,',
',497,,,497,,,497,497,,497,,497,,,,497,,,,,,,,497,,,,,497,497,497,497',
'497,497,,,,497,497,297,297,297,297,297,297,,,,297,297,,,,297,,297,297',
'297,297,297,297,297,,,,,297,297,297,297,297,297,297,,,297,,,,,,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,,297,297,,297,297,297',
',,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,297,,297,,,,297,,,,,,,,297,',
',,,297,297,297,297,297,297,,,,297,297,808,808,808,808,808,808,,,,808',
'808,,,,808,,808,808,808,808,808,808,808,,,,,808,808,808,808,808,808',
'808,,,808,,,,,,808,808,808,808,808,808,808,808,808,808,808,808,808,808',
',808,808,,808,808,808,,,,,,,,,,,,,,,,,,,,808,,,808,,,808,808,,808,,808',
',,,808,,,,,,,,808,,,,,808,808,808,808,808,808,,,,808,808,501,501,501',
'501,501,501,,,,501,501,,,,501,,501,501,501,501,501,501,501,,,,,501,501',
'501,501,501,501,501,,,501,,,,,,501,501,501,501,501,501,501,501,501,501',
'501,501,501,501,,501,501,,501,501,501,,,,,,,,,,,,,,,,,,,,501,,,501,',
',501,501,,501,,501,,,,501,,,,,,,,501,,,,,501,501,501,501,501,501,,,',
'501,501,725,725,725,725,725,725,,,,725,725,,,,725,,725,725,725,725,725',
'725,725,,,,,725,725,725,725,725,725,725,,,725,,,,,,725,725,725,725,725',
'725,725,725,725,725,725,725,725,725,,725,725,,725,725,725,,,,,,,,,,',
',,,,,,,,,725,,,725,,,725,725,,725,,725,,,,725,,,,,,,,725,,,,,725,725',
'725,725,725,725,,,,725,725,736,736,736,736,736,736,,,,736,736,,,,736',
',736,736,736,736,736,736,736,,,,,736,736,736,736,736,736,736,,,736,',
',,,,736,736,736,736,736,736,736,736,736,736,736,736,736,736,,736,736',
',736,736,736,,,,,,,,,,,,,,,,,,,,736,,,736,,,736,736,,736,,736,,,,736',
',,,,,,,736,,,,,736,736,736,736,736,736,,,,736,736,275,275,275,275,275',
'275,,,,275,275,,,,275,,275,275,275,275,275,275,275,,,,,275,275,275,275',
'275,275,275,,,275,,,,,,275,275,275,275,275,275,275,275,275,275,275,275',
'275,275,,275,275,,275,275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275',
',275,,275,,,,275,,,,,,,,275,,,,,275,275,275,275,275,275,,,,275,275,737',
'737,737,737,737,737,,,,737,737,,,,737,,737,737,737,737,737,737,737,',
',,,737,737,737,737,737,737,737,,,737,,,,,,737,737,737,737,737,737,737',
'737,737,737,737,737,737,737,,737,737,,737,737,737,,,,,,,,,,,,,,,,,,',
',737,,,737,,,737,737,,737,,737,,,,737,,,,,,,,737,,,,,737,737,737,737',
'737,737,,,,737,737,701,701,701,701,701,701,,,,701,701,,,,701,,701,701',
'701,701,701,701,701,,,,,701,701,701,701,701,701,701,,,701,,,,,,701,701',
'701,701,701,701,701,701,701,701,701,701,701,701,,701,701,,701,701,701',
',,,,,,,,,,,,,,,,,,,701,,,701,,,701,701,,701,,701,,,,701,,,,,,,,701,',
',,,701,701,701,701,701,701,,,,701,701,842,842,842,842,842,842,,,,842',
'842,,,,842,,842,842,842,842,842,842,842,,,,,842,842,842,842,842,842',
'842,,,842,,,,,,842,842,842,842,842,842,842,842,842,842,842,842,842,842',
',842,842,,842,842,842,,,,,,,,,,,,,,,,,,,,842,,,842,,,842,842,,842,,842',
',,,842,,,,,,,,842,,,,,842,842,842,842,842,842,,,,842,842,270,270,270',
'270,270,270,,,,270,270,,,,270,,270,270,270,270,270,270,270,,,,,270,270',
'270,270,270,270,270,,,270,,,,,,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,,270,270,,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,',
',270,270,,270,,270,,,,270,,,,,,,,270,,,,,270,270,270,270,270,270,,,',
'270,270,856,856,856,856,856,856,,,,856,856,,,,856,,856,856,856,856,856',
'856,856,,,,,856,856,856,856,856,856,856,,,856,,,,,,856,856,856,856,856',
'856,856,856,856,856,856,856,856,856,,856,856,,856,856,856,,,,,,,,,,',
',,,,,,,,,856,,,856,,,856,856,,856,,856,,,,856,,,,,,,,856,,,,,856,856',
'856,856,856,856,,,,856,856,675,675,675,675,675,675,,,,675,675,,,,675',
',675,675,675,675,675,675,675,,,,,675,675,675,675,675,675,675,,,675,',
',,,,675,675,675,675,675,675,675,675,675,675,675,675,675,675,,675,675',
',675,675,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,675,,675,,,,675',
',,,,,,,675,,,,,675,675,675,675,675,675,,,,675,675,653,653,653,653,653',
'653,,,,653,653,,,,653,,653,653,653,653,653,653,653,,,,,653,653,653,653',
'653,653,653,,,653,,,,,,653,653,653,653,653,653,653,653,653,653,653,653',
'653,653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,653',
',653,,653,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653,,,,653,653,862',
'862,862,862,862,862,,,,862,862,,,,862,,862,862,862,862,862,862,862,',
',,,862,862,862,862,862,862,862,,,862,,,,,,862,862,862,862,862,862,862',
'862,862,862,862,862,862,862,,862,862,,862,862,862,,,,,,,,,,,,,,,,,,',
',862,,,862,,,862,862,,862,,862,,,,862,,,,,,,,862,,,,,862,862,862,862',
'862,862,,,,862,862,191,191,191,191,191,191,,,,191,191,,,,191,,191,191',
'191,191,191,191,191,,,,,191,191,191,191,191,191,191,,,191,,,,,,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,,191,191,,191,191,191',
',,,,,,,,,,,,,,,,,,,191,,,191,,,191,191,,191,,191,,,,191,,,,,,,,191,',
',,,191,191,191,191,191,191,,,,191,191,848,848,848,848,848,848,,,,848',
'848,,,,848,,848,848,848,848,848,848,848,,,,,848,848,848,848,848,848',
'848,,,848,,,,,,848,848,848,848,848,848,848,848,848,848,848,848,848,848',
',848,848,,848,848,848,,,,,,,,,,,,,,,,,,,,848,,,848,,,848,848,,848,,848',
',,,848,,,,,,,,848,,,,,848,848,848,848,848,848,,,,848,848,208,208,208',
'208,208,208,,,,208,208,,,,208,,208,208,208,208,208,208,208,,,,,208,208',
'208,208,208,208,208,,,208,,,,,,208,208,208,208,208,208,208,208,208,208',
'208,208,208,208,,208,208,,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,',
',208,208,,208,,208,,,,208,,,,,,,,208,,,,,208,208,208,208,208,208,,,',
'208,208,853,853,853,853,853,853,,,,853,853,,,,853,,853,853,853,853,853',
'853,853,,,,,853,853,853,853,853,853,853,,,853,,,,,,853,853,853,853,853',
'853,853,853,853,853,853,853,853,853,,853,853,,853,853,853,,,,,,,,,,',
',,,,,,,,,853,,,853,,,853,853,,853,,853,,,,853,,,,,,,,853,,,,,853,853',
'853,853,853,853,,,,853,853,652,652,652,652,652,652,,,,652,652,,,,652',
',652,652,652,652,652,652,652,,,,,652,652,652,652,652,652,652,,,652,',
',,,,652,652,652,652,652,652,652,652,652,652,652,652,652,652,,652,652',
',652,652,652,,,,,,,,,,,,,,,,,,,,652,,,652,,,652,652,,652,,652,,,,652',
',,,,,,,652,,,,,652,652,652,652,652,652,,,,652,652,2,2,2,2,2,2,,,,2,2',
',,,2,,2,2,2,2,2,2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2',
'2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,2,,2,,,,2,,,,,,,,2',
',,,,2,2,2,2,2,2,,,,2,2,569,569,569,,569,,,,569,569,,,,569,,569,569,569',
'569,569,569,569,,,,,569,569,569,569,569,569,569,,,,,,,,,,569,,,569,569',
'569,569,569,569,569,569,569,569,,569,569,,,,569,,,,,,,,,,,,,,,,,,,,569',
',,569,,,569,569,,569,,569,,,,,,,,,,,569,,,,,,569,569,569,569,569,569',
',,,569,569,198,198,198,,198,,,,198,198,,,,198,,198,198,198,198,198,198',
'198,,,,,198,198,198,198,198,198,198,,,,,,,,,,198,,,198,198,198,198,198',
'198,198,198,198,198,,198,198,,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198',
',,198,198,,198,,,,,,198,,,,,,,,198,,,,,198,198,198,198,198,198,,,,198',
'198,199,199,199,,199,,,,199,199,,,,199,,199,199,199,199,199,199,199',
',,,,199,199,199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199',
'199,199,199,199,199,,199,199,,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199',
',,199,199,,199,,,,,,199,,,,,,,,199,,,,,199,199,199,199,199,199,,,,199',
'199,200,200,200,,200,,,,200,200,,,,200,,200,200,200,200,200,200,200',
',,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200,200,200,200',
'200,200,200,200,200,,200,200,,200,200,200,,,,,,,,,,,,,,,,,,,,200,,,200',
',,200,200,,200,,,,,,200,,,,,,,,200,,,,,200,200,200,200,200,200,,,,200',
'200,640,640,640,,640,,,,640,640,,,,640,,640,640,640,640,640,640,640',
',,,,640,640,640,640,640,640,640,,,640,,,,,,,640,,,640,640,640,640,640',
'640,640,640,640,640,,640,640,,640,640,640,,,,,,,,,,,,,,,,,,,,640,,,640',
',,640,640,,640,,,,,,640,,,,,,,,640,,,,,640,640,640,640,640,640,,,,640',
'640,43,43,43,,43,,,,43,43,,,,43,,43,43,43,43,43,43,43,,,,,43,43,43,43',
'43,43,43,,,,,,,,,,43,,,43,43,43,43,43,43,43,43,43,43,,43,43,,43,43,43',
',,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,43,,,,,,43,,,,,,,,43,,,,,43,43,43',
'43,43,43,,,,43,43,42,42,42,,42,,,,42,42,,,,42,,42,42,42,42,42,42,42',
',,,,42,42,42,42,42,42,42,,,,,,,,,,42,,,42,42,42,42,42,42,42,42,42,42',
',42,42,,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,42,,,,,,42,,,,',
',,,42,,,,,42,42,42,42,42,42,,,,42,42,750,750,750,,750,,,,750,750,,,',
'750,,750,750,750,750,750,750,750,,,,,750,750,750,750,750,750,750,,,750',
',,,,,,750,,,750,750,750,750,750,750,750,750,750,750,,750,750,,750,750',
'750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,750,,,,,,750,,,,,,,,750',
',,,,750,750,750,750,750,750,,,,750,750,441,441,441,,441,,,,441,441,',
',,441,,441,441,441,441,441,441,441,,,,,441,441,441,441,441,441,441,',
',,,,,,,,441,,,441,441,441,441,441,441,441,441,441,441,,441,441,,441',
'441,441,,,,,,,,,,,,,,,,,,,,441,,,441,,,441,441,,441,,,,,,441,,,,,,,',
'441,,,,,441,441,441,441,441,441,,,,441,441,194,194,194,,194,,,,194,194',
',,,194,,194,194,194,194,194,194,194,,,,,194,194,194,194,194,194,194',
',,,,,,,,,194,,,194,194,194,194,194,194,194,194,194,194,,194,194,,194',
'194,194,,,,,,,,,,,,,,,,,,,,194,,,194,,,194,194,,194,,,,,,194,,,,,,,',
'194,,,,,194,194,194,194,194,194,,,,194,194,193,193,193,,193,,,,193,193',
',,,193,,193,193,193,193,193,193,193,,,,,193,193,193,193,193,193,193',
',,,,,,,,,193,,,193,193,193,193,193,193,193,193,193,193,,193,193,,193',
'193,193,,,,,,,,,,,,,,,,,,,,193,,,193,,,193,193,,193,,193,,,,193,,,,',
',,,193,,,,,193,193,193,193,193,193,,,,193,193,211,211,211,,211,,,,211',
'211,,,,211,,211,211,211,211,211,211,211,,,,,211,211,211,211,211,211',
'211,,,,,,,,,,211,,,211,211,211,211,211,211,211,211,211,211,,211,211',
',211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,211,,,,,,211,,',
',,,,,211,,,,,211,211,211,211,211,211,,,,211,211,212,212,212,,212,,,',
'212,212,,,,212,,212,212,212,212,212,212,212,,,,,212,212,212,212,212',
'212,212,,,,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212,,212',
'212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,212,,,,,,212',
',,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,213,213,213,,213,',
',,213,213,,,,213,,213,213,213,213,213,213,213,,,,,213,213,213,213,213',
'213,213,,,,,,,,,,213,,,213,213,213,213,213,213,213,213,213,213,,213',
'213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,213,,,,,,213',
',,,,,,,213,,,,,213,213,213,213,213,213,,,,213,213,214,214,214,,214,',
',,214,214,,,,214,,214,214,214,214,214,214,214,,,,,214,214,214,214,214',
'214,214,,,,,,,,,,214,,,214,214,214,214,214,214,214,214,214,214,,214',
'214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,214,,,,,,214',
',,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214,215,215,215,,215,',
',,215,215,,,,215,,215,215,215,215,215,215,215,,,,,215,215,215,215,215',
'215,215,,,,,,,,,,215,,,215,215,215,215,215,215,215,215,215,215,,215',
'215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,215,,,,,,215',
',,,,,,,215,,,,,215,215,215,215,215,215,,,,215,215,216,216,216,,216,',
',,216,216,,,,216,,216,216,216,216,216,216,216,,,,,216,216,216,216,216',
'216,216,,,,,,,,,,216,,,216,216,216,216,216,216,216,216,216,216,,216',
'216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,216,,,,,,216',
',,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,217,217,217,,217,',
',,217,217,,,,217,,217,217,217,217,217,217,217,,,,,217,217,217,217,217',
'217,217,,,,,,,,,,217,,,217,217,217,217,217,217,217,217,217,217,,217',
'217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,217,,,,,,217',
',,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,218,218,218,,218,',
',,218,218,,,,218,,218,218,218,218,218,218,218,,,,,218,218,218,218,218',
'218,218,,,,,,,,,,218,,,218,218,218,218,218,218,218,218,218,218,,218',
'218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,218,,,,,,218',
',,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,219,219,219,,219,',
',,219,219,,,,219,,219,219,219,219,219,219,219,,,,,219,219,219,219,219',
'219,219,,,,,,,,,,219,,,219,219,219,219,219,219,219,219,219,219,,219',
'219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,219,,,,,,219',
',,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,220,220,220,,220,',
',,220,220,,,,220,,220,220,220,220,220,220,220,,,,,220,220,220,220,220',
'220,220,,,,,,,,,,220,,,220,220,220,220,220,220,220,220,220,220,,220',
'220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,220,,,,,,220',
',,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,221,221,221,,221,',
',,221,221,,,,221,,221,221,221,221,221,221,221,,,,,221,221,221,221,221',
'221,221,,,,,,,,,,221,,,221,221,221,221,221,221,221,221,221,221,,221',
'221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,221,,,,,,221',
',,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,222,222,222,,222,',
',,222,222,,,,222,,222,222,222,222,222,222,222,,,,,222,222,222,222,222',
'222,222,,,,,,,,,,222,,,222,222,222,222,222,222,222,222,222,222,,222',
'222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,222,,,,,,222',
',,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,223,223,223,,223,',
',,223,223,,,,223,,223,223,223,223,223,223,223,,,,,223,223,223,223,223',
'223,223,,,,,,,,,,223,,,223,223,223,223,223,223,223,223,223,223,,223',
'223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,223,,,,,,223',
',,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,224,224,224,,224,',
',,224,224,,,,224,,224,224,224,224,224,224,224,,,,,224,224,224,224,224',
'224,224,,,,,,,,,,224,,,224,224,224,224,224,224,224,224,224,224,,224',
'224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,224,,,,,,224',
',,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,225,225,225,,225,',
',,225,225,,,,225,,225,225,225,225,225,225,225,,,,,225,225,225,225,225',
'225,225,,,,,,,,,,225,,,225,225,225,225,225,225,225,225,225,225,,225',
'225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,225,,,,,,225',
',,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,226,226,226,,226,',
',,226,226,,,,226,,226,226,226,226,226,226,226,,,,,226,226,226,226,226',
'226,226,,,,,,,,,,226,,,226,226,226,226,226,226,226,226,226,226,,226',
'226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,226,,,,,,226',
',,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,227,227,227,,227,',
',,227,227,,,,227,,227,227,227,227,227,227,227,,,,,227,227,227,227,227',
'227,227,,,,,,,,,,227,,,227,227,227,227,227,227,227,227,227,227,,227',
'227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,227,,,,,,227',
',,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,228,228,228,,228,',
',,228,228,,,,228,,228,228,228,228,228,228,228,,,,,228,228,228,228,228',
'228,228,,,,,,,,,,228,,,228,228,228,228,228,228,228,228,228,228,,228',
'228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,228,,,,,,228',
',,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,229,229,229,,229,',
',,229,229,,,,229,,229,229,229,229,229,229,229,,,,,229,229,229,229,229',
'229,229,,,,,,,,,,229,,,229,229,229,229,229,229,229,229,229,229,,229',
'229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,229,,,,,,229',
',,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,230,230,230,,230,',
',,230,230,,,,230,,230,230,230,230,230,230,230,,,,,230,230,230,230,230',
'230,230,,,,,,,,,,230,,,230,230,230,230,230,230,230,230,230,230,,230',
'230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,230,,,,,,230',
',,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,231,231,231,,231,',
',,231,231,,,,231,,231,231,231,231,231,231,231,,,,,231,231,231,231,231',
'231,231,,,,,,,,,,231,,,231,231,231,231,231,231,231,231,231,231,,231',
'231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,231,,,,,,231',
',,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,232,232,232,,232,',
',,232,232,,,,232,,232,232,232,232,232,232,232,,,,,232,232,232,232,232',
'232,232,,,,,,,,,,232,,,232,232,232,232,232,232,232,232,232,232,,232',
'232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,232,,,,,,232',
',,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,233,233,233,,233,',
',,233,233,,,,233,,233,233,233,233,233,233,233,,,,,233,233,233,233,233',
'233,233,,,,,,,,,,233,,,233,233,233,233,233,233,233,233,233,233,,233',
'233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,233,,,,,,233',
',,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,234,234,234,,234,',
',,234,234,,,,234,,234,234,234,234,234,234,234,,,,,234,234,234,234,234',
'234,234,,,,,,,,,,234,,,234,234,234,234,234,234,234,234,234,234,,234',
'234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,234,,,,,,234',
',,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,235,235,235,,235,',
',,235,235,,,,235,,235,235,235,235,235,235,235,,,,,235,235,235,235,235',
'235,235,,,,,,,,,,235,,,235,235,235,235,235,235,235,235,235,235,,235',
'235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,235,,,,,,235',
',,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,236,236,236,,236,',
',,236,236,,,,236,,236,236,236,236,236,236,236,,,,,236,236,236,236,236',
'236,236,,,,,,,,,,236,,,236,236,236,236,236,236,236,236,236,236,,236',
'236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,236,,,,,,236',
',,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,777,777,777,,777,',
',,777,777,,,,777,,777,777,777,777,777,777,777,,,,,777,777,777,777,777',
'777,777,,,,,,,,,,777,,,777,777,777,777,777,777,777,777,777,777,,777',
'777,,777,777,777,,,,,,,,,,,,,,,,,,,,777,,,777,,,777,777,,777,,,,,,777',
',,,,,,,777,,,,,777,777,777,777,777,777,,,,777,777,634,634,634,,634,',
',,634,634,,,,634,,634,634,634,634,634,634,634,,,,,634,634,634,634,634',
'634,634,,,,,,,,,,634,,,634,634,634,634,634,634,634,634,634,634,,634',
'634,,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,,,634,634,,634,,634,,',
',634,,,,,,,,634,,,,,634,634,634,634,634,634,,,,634,634,620,620,620,',
'620,,,,620,620,,,,620,,620,620,620,620,620,620,620,,,,,620,620,620,620',
'620,620,620,,,,,,,,,,620,,,620,620,620,620,620,620,620,620,620,620,',
'620,620,,620,620,620,,,,,,,,,,,,,,,,,,,,620,,,620,,,620,620,,620,,,',
',,620,,,,,,,,620,,,,,620,620,620,620,620,620,,,,620,620,851,851,851',
',851,,,,851,851,,,,851,,851,851,851,851,851,851,851,,,,,851,851,851',
'851,851,851,851,,,,,,,,,,851,,,851,851,851,851,851,851,851,851,851,851',
',851,851,,851,851,851,,,,,,,,,,,,,,,,,,,,851,,,851,,,851,851,,851,,',
',,,851,,,,,,,,851,,,,,851,851,851,851,851,851,,,,851,851,245,245,245',
',245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,245,245,245',
'245,245,245,245,,,,,,,,,,245,,,245,245,245,245,245,245,245,245,245,245',
',245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,245,,',
',,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,247,247,247',
',247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,247,247,247',
'247,247,247,247,,,,,,,,,,247,,,247,247,247,247,247,247,247,247,247,247',
',247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,247,,',
',,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,192,192,192',
',192,,,,192,192,,,,192,,192,192,192,192,192,192,192,,,,,192,192,192',
'192,192,192,192,,,,,,,,,,192,,,192,192,192,192,192,192,192,192,192,192',
',192,192,,192,192,192,,,,,,,,,,,,,,,,,,,,192,,,192,,,192,192,,192,,192',
',,,192,,,,,,,,192,,,,,192,192,192,192,192,192,,,,192,192,253,253,253',
',253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,253,253,253',
'253,253,253,253,,,,,,,,,,253,,,253,253,253,253,253,253,253,253,253,253',
',253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,900,900,900',
',900,,,,900,900,,,,900,,900,900,900,900,900,900,900,,,,,900,900,900',
'900,900,900,900,,,,,,,,,,900,,,900,900,900,900,900,900,900,900,900,900',
',900,900,,900,900,900,,,,,,,,,,,,,,,,,,,,900,,,900,,,900,900,,900,,',
',,,900,,,,,,,,900,,,,,900,900,900,900,900,900,,,,900,900,617,617,617',
',617,,,,617,617,,,,617,,617,617,617,617,617,617,617,,,,,617,617,617',
'617,617,617,617,,,,,,,,,,617,,,617,617,617,617,617,617,617,617,617,617',
',617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,617,,617',
',,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,41,41,41,,41',
',,,41,41,,,,41,,41,41,41,41,41,41,41,,,,,41,41,41,41,41,41,41,,,,,,',
',,,41,,,41,41,41,41,41,41,41,41,41,41,,41,41,,41,41,41,,,,,,,,,,,,,',
',,,,,,41,,,41,,,41,41,,41,,,,,,41,,,,,,,,41,,,,,41,41,41,41,41,41,,',
',41,41,865,865,865,,865,,,,865,865,,,,865,,865,865,865,865,865,865,865',
',,,,865,865,865,865,865,865,865,,,,,,,,,,865,,,865,865,865,865,865,865',
'865,865,865,865,,865,865,,865,865,865,,,,,,,,,,,,,,,,,,,,865,,,865,',
',865,865,,865,,,,,,865,,,,,,,,865,,,,,865,865,865,865,865,865,,,,865',
'865,742,742,742,,742,,,,742,742,,,,742,,742,742,742,742,742,742,742',
',,,,742,742,742,742,742,742,742,,,,,,,,,,742,,,742,742,742,742,742,742',
'742,742,742,742,,742,742,,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,',
',742,742,,742,,,,,,742,,,,,,,,742,,,,,742,742,742,742,742,742,,,,742',
'742,406,406,406,,406,,,,406,406,,,,406,,406,406,406,406,406,406,406',
',,,,406,406,406,406,406,406,406,,,,,,,,,,406,,,406,406,406,406,406,406',
'406,406,406,406,,406,406,,406,406,406,,,,,,,,,,,,,,,,,,,,406,,,406,',
',406,406,,406,,,,,,406,,,,,,,,406,,,,,406,406,406,406,406,406,,,,406',
'406,405,405,405,,405,,,,405,405,,,,405,,405,405,405,405,405,405,405',
',,,,405,405,405,405,405,405,405,,,,,,,,,,405,,,405,405,405,405,405,405',
'405,405,405,405,,405,405,,405,405,405,,,,,,,,,,,,,,,,,,,,405,,,405,',
',405,405,,405,,,,,,405,,,,,,,,405,,,,,405,405,405,405,405,405,,,,405',
'405,404,404,404,,404,,,,404,404,,,,404,,404,404,404,404,404,404,404',
',,,,404,404,404,404,404,404,404,,,,,,,,,,404,,,404,404,404,404,404,404',
'404,404,404,404,,404,404,,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,',
',404,404,,404,,,,,,404,,,,,,,,404,,,,,404,404,404,404,404,404,,,,404',
'404,108,108,108,108,108,,,,108,108,,,,108,,108,108,108,108,108,108,108',
',,,,108,108,108,108,108,108,108,,,108,,,,,,108,108,108,108,108,108,108',
'108,108,108,108,108,108,108,,108,108,,108,108,108,,,,,,,,,,,,,,,,,,',
',108,,,108,,,108,108,,108,,108,,,,108,,,,,,,,108,,,,,108,108,108,108',
'108,108,,,,108,108,107,107,107,,107,,,,107,107,,,,107,,107,107,107,107',
'107,107,107,,,,,107,107,107,107,107,107,107,,,107,,,,,,,107,,,107,107',
'107,107,107,107,107,107,107,107,,107,107,,107,107,107,,,,,,,,,,,,,,',
',,,,,107,,,107,,,107,107,,107,,,,,,107,,,,,,,,107,,,,,107,107,107,107',
'107,107,,,,107,107,106,106,106,,106,,,,106,106,,,,106,,106,106,106,106',
'106,106,106,,,,,106,106,106,106,106,106,106,,,106,,,,,,,106,,,106,106',
'106,106,106,106,106,106,106,106,,106,106,,106,106,106,,,,,,,,,,,,,,',
',,,,,106,,,106,,,106,106,,106,,,,,,106,,,,,,,,106,,,,,106,106,106,106',
'106,106,,,,106,106,105,105,105,,105,,,,105,105,,,,105,,105,105,105,105',
'105,105,105,,,,,105,105,105,105,105,105,105,,,105,,,,,,,105,,,105,105',
'105,105,105,105,105,105,105,105,,105,105,,105,105,105,,,,,,,,,,,,,,',
',,,,,105,,,105,,,105,105,,105,,,,,,105,,,,,,,,105,,,,,105,105,105,105',
'105,105,,,,105,105,274,274,274,,274,,,,274,274,,,,274,,274,274,274,274',
'274,274,274,,,,,274,274,274,274,274,274,274,,,,,,,,,,274,,,274,274,274',
'274,274,274,274,274,274,274,,274,274,,,,274,,,,,,,,,,,,,,,,,,,,274,',
',274,,,274,274,,274,,,,,,,,,,,,,,,,,,,274,274,274,274,274,274,,,,274',
'274,104,104,104,,104,,,,104,104,,,,104,,104,104,104,104,104,104,104',
',,,,104,104,104,104,104,104,104,,,104,,,,,,,104,,,104,104,104,104,104',
'104,104,104,104,104,,104,104,,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104',
',,104,104,,104,,,,,,104,,,,,,,,104,,,,,104,104,104,104,104,104,,,,104',
'104,683,683,683,,683,,,,683,683,,,,683,,683,683,683,683,683,683,683',
',,,,683,683,683,683,683,683,683,,,,,,,,,,683,,,683,683,683,683,683,683',
'683,683,683,683,,683,683,,683,683,683,,,,,,,,,,,,,,,,,,,,683,,,683,',
',683,683,,683,,,,,,683,,,,,,,,683,,,,,683,683,683,683,683,683,,,,683',
'683,684,684,684,,684,,,,684,684,,,,684,,684,684,684,684,684,684,684',
',,,,684,684,684,684,684,684,684,,,,,,,,,,684,,,684,684,684,684,684,684',
'684,684,684,684,,684,684,,684,684,684,,,,,,,,,,,,,,,,,,,,684,,,684,',
',684,684,,684,,,,,,684,,,,,,,,684,,,,,684,684,684,684,684,684,,,,684',
'684,590,590,590,,590,,,,590,590,,,,590,,590,590,590,590,590,590,590',
',,,,590,590,590,590,590,590,590,,,,,,,,,,590,,,590,590,590,590,590,590',
'590,590,590,590,,590,590,,590,590,590,,,,,,,,,,,,,,,,,,,,590,,,590,',
',590,590,,590,,,,,,590,,,,,,,,590,,,,,590,590,590,590,590,590,,,,590',
'590,576,576,576,,576,,,,576,576,,,,576,,576,576,576,576,576,576,576',
',,,,576,576,576,576,576,576,576,,,,,,,,,,576,,,576,576,576,576,576,576',
'576,576,576,576,,576,576,,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,',
',576,576,,576,,,,,,576,,,,,,,,576,,,,,576,576,576,576,576,576,,,,576',
'576,694,694,694,,694,,,,694,694,,,,694,,694,694,694,694,694,694,694',
',,,,694,694,694,694,694,694,694,,,,,,,,,,694,,,694,694,694,694,694,694',
'694,694,694,694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,',
',694,694,,694,,,,,,694,,,,,,,,694,,,,,694,694,694,694,694,694,,,,694',
'694,572,572,572,,572,,,,572,572,,,,572,,572,572,572,572,572,572,572',
',,,,572,572,572,572,572,572,572,,,,,,,,,,572,,,572,572,572,572,572,572',
'572,572,572,572,,572,572,,572,572,572,,,,,,,,,,,,,,,,,,,,572,,,572,',
',572,572,,572,,,,,,572,,,,,,,,572,,,,,572,572,572,572,572,572,,,,572',
'572,734,734,734,,734,,,,734,734,,,,734,,734,734,734,734,734,734,734',
',,,,734,734,734,734,734,734,734,,,734,,,,,,,734,,,734,734,734,734,734',
'734,734,734,734,734,,734,734,,734,734,734,,,,,,,,,,,,,,,,,,,,734,,,734',
',,734,734,,734,,,,,,734,,,,,,,,734,,,,,734,734,734,734,734,734,,,,734',
'734,35,35,35,,35,,,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,35,35,35,35',
'35,35,35,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,,35,35,,,,35,,',
',,,,,,,,,,,,,,,,,35,,,35,,,35,35,,35,,,,,,,,,,,,,,,,,,,35,35,35,35,35',
'35,,,,35,35,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,8,8,8,8,8,8,8,',
',8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8',
',,8,,,8,8,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,567,567,567,,567',
',,,567,567,,,,567,,567,567,567,567,567,567,567,,,,,567,567,567,567,567',
'567,567,,,,,,,,,,567,,,567,567,567,567,567,567,567,567,567,567,,567',
'567,,567,567,567,,,,,,,,,,,,,,,,,,,,567,,,567,,,567,567,,567,,,,,,567',
',,,,,,,567,,,,,567,567,567,567,567,567,,,,567,567,807,807,807,,807,',
',,807,807,,,,807,,807,807,807,807,807,807,807,,,,,807,807,807,807,807',
'807,807,,,,,,,,,,807,,,807,807,807,807,807,807,807,807,807,807,,807',
'807,,807,807,807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,807,,807,,',
',807,,,,,,,,807,,,,,807,807,807,807,807,807,,,,807,807,34,34,34,,34',
',,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,34,34,34,34,34,34,34,,,,,,',
',,,34,,,34,34,34,34,34,34,34,34,34,34,,34,34,,,,34,,,,,,,,,,,,,,,,,',
',,34,,,34,,,34,34,,34,,34,,,,,,,,,,,,,,,,,34,34,34,34,34,34,,,,34,34',
'475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475,475,,,,',
'475,475,475,475,475,475,475,,,,,,,,,,475,,,475,475,475,475,475,475,475',
'475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475',
'475,,475,,,,,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475,475',
'799,799,799,,799,,,,799,799,,,,799,,799,799,799,799,799,799,799,,,,',
'799,799,799,799,799,799,799,,,,,,,,,,799,,,799,799,799,799,799,799,799',
'799,799,799,,799,799,,,,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799,',
'799,,,,,,,,,,,,,,,,,,,799,799,799,799,799,799,,,,799,799,295,295,295',
',295,,,,295,295,,,,295,,295,295,295,295,295,295,295,,,,,295,295,295',
'295,295,295,295,,,,,,,,,,295,,,295,295,295,295,295,295,295,295,295,295',
',295,295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,295,,295,295,,295',
',,,,,295,,,,,,,,295,,,,,295,295,295,295,295,295,,,,295,295,868,868,868',
',868,,,,868,868,,,,868,,868,868,868,868,868,868,868,,,,,868,868,868',
'868,868,868,868,,,,,,,,,,868,,,868,868,868,868,868,868,868,868,868,868',
',868,868,,868,868,868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868,868,,868,,',
',,,868,,,,,,,,868,,,,,868,868,868,868,868,868,,,,868,868,695,695,695',
',695,,,,695,695,,,,695,,695,695,695,695,695,695,695,,,,,695,695,695',
'695,695,695,695,,,,,,,,,,695,,,695,695,695,695,695,695,695,695,695,695',
',695,695,,695,695,695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,,695,,',
',,,695,,,,,,,,695,,,,,695,695,695,695,695,695,,,,695,695,55,55,55,,55',
',,,55,55,,,,55,,55,55,55,55,55,55,55,,,,,55,55,55,55,55,55,55,,,55,',
',,,,,55,,,55,55,55,55,55,55,55,55,55,55,,55,55,,55,55,55,,,,,,,,,,,',
',,,,,,,,55,,,55,,,55,55,,55,,,,,,55,,,,,,,,55,,,,,55,55,55,55,55,55',
',,,55,55,9,9,9,9,9,9,9,9,,,9,9,9,9,9,,,9,9,9,9,9,9,9,,,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,9,,,,,,,,9,9,,9,9,9,9,,9,9,,,9,,',
',,9,9,9,9,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,,9,,,9,9,10,10,10,10,10',
'10,10,10,,9,10,10,10,10,10,,,10,10,10,10,10,10,10,,,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,,,10,,,,,,,,10,10',
',10,10,10,10,,10,10,,,10,,,,,10,10,10,10,,,,,,,,,,,,,10,10,,10,10,10',
'10,10,10,10,10,10,,10,,,10,10,,,303,303,303,,303,,,10,303,303,,,,303',
',303,303,303,303,303,303,303,,,,,303,303,303,303,303,303,303,,,,,,,',
',,303,,,303,303,303,303,303,303,303,303,303,303,,303,303,,303,303,303',
',,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,303,,,,,,303,,,,,,,,303,,,,',
'303,303,303,303,303,303,,,,303,303,560,560,560,,560,,,,560,560,,,,560',
',560,560,560,560,560,560,560,,,,,560,560,560,560,560,560,560,,,,,,,',
',,560,,,560,560,560,560,560,560,560,560,560,560,,560,560,,560,560,560',
',,,,,,,,,,,,,,,,,,,560,,,560,,,560,560,,560,,,,,,560,,,,,,,,560,,,,',
'560,560,560,560,560,560,,,,560,560,696,696,696,,696,,,,696,696,,,,696',
',696,696,696,696,696,696,696,,,,,696,696,696,696,696,696,696,,,,,,,',
',,696,,,696,696,696,696,696,696,696,696,696,696,,696,696,,696,696,696',
',,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,696,,,,,,696,,,,,,,,696,,,,',
'696,696,696,696,696,696,,,,696,696,788,788,788,,788,,,,788,788,,,,788',
',788,788,788,788,788,788,788,,,,,788,788,788,788,788,788,788,,,,,,,',
',,788,,,788,788,788,788,788,788,788,788,788,788,,788,788,,788,788,788',
',,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,788,,,,,,788,,,,,,,,788,,,,',
'788,788,788,788,788,788,,,,788,788,557,557,557,,557,,,,557,557,,,,557',
',557,557,557,557,557,557,557,,,,,557,557,557,557,557,557,557,,,,,,,',
',,557,,,557,557,557,557,557,557,557,557,557,557,,557,557,,557,557,557',
',,,,,,,,,,,,,,,,,,,557,,,557,,,557,557,,557,,,,,,557,,,,,,,,557,,,,',
'557,557,557,557,557,557,,,,557,557,552,552,552,,552,,,,552,552,,,,552',
',552,552,552,552,552,552,552,,,,,552,552,552,552,552,552,552,,,,,,,',
',,552,,,552,552,552,552,552,552,552,552,552,552,,552,552,,552,552,552',
',,,,,,,,,,,,,,,,,,,552,,,552,,,552,552,,552,,,,,,552,,,,,,,,552,,,,',
'552,552,552,552,552,552,,,,552,552,59,59,59,,59,,,,59,59,,,,59,,59,59',
'59,59,59,59,59,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59',
'59,59,59,59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59',
',59,,,,,,59,,,,,,,,59,,,,,59,59,59,59,59,59,,,,59,59,476,476,476,,476',
',,,476,476,,,,476,,476,476,476,476,476,476,476,,,,,476,476,476,476,476',
'476,476,,,,,,,,,,476,,,476,476,476,476,476,476,476,476,476,476,,476',
'476,,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476,,,476,476,,476,,,,,,476',
',,,,,,,476,,,,,476,476,476,476,476,476,,,,476,476,313,313,313,,313,',
',,313,313,,,,313,,313,313,313,313,313,313,313,,,,,313,313,313,313,313',
'313,313,,,313,,,,,,,313,,,313,313,313,313,313,313,313,313,313,313,,313',
'313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,,,313,313,,313,,,,,,313',
',,,,,,,313,,,,,313,313,313,313,313,313,,,,313,313,314,314,314,,314,',
',,314,314,,,,314,,314,314,314,314,314,314,314,,,,,314,314,314,314,314',
'314,314,,,314,,,,,,,314,,,314,314,314,314,314,314,314,314,314,314,,314',
'314,,314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,314,,,,,,314',
',,,,,,,314,,,,,314,314,314,314,314,314,,,,314,314,551,551,551,,551,',
',,551,551,,,,551,,551,551,551,551,551,551,551,,,,,551,551,551,551,551',
'551,551,,,,,,,,,,551,,,551,551,551,551,551,551,551,551,551,551,,551',
'551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551,,551,,,,,,551',
',,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551,548,548,548,,548,',
',,548,548,,,,548,,548,548,548,548,548,548,548,,,,,548,548,548,548,548',
'548,548,,,,,,,,,,548,,,548,548,548,548,548,548,548,548,548,548,,548',
'548,,548,548,548,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,548,,548,,548,,',
',548,,,,,,,,548,,,,,548,548,548,548,548,548,,,,548,548,786,786,786,',
'786,,,,786,786,,,,786,,786,786,786,786,786,786,786,,,,,786,786,786,786',
'786,786,786,,,,,,,,,,786,,,786,786,786,786,786,786,786,786,786,786,',
'786,786,,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,786,,,',
',,786,,,,,,,,786,,,,,786,786,786,786,786,786,,,,786,786,60,60,60,,60',
',,,60,60,,,,60,,60,60,60,60,60,60,60,,,,,60,60,60,60,60,60,60,,,60,',
',,,,,60,,,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60,60,,,,,,,,,,,',
',,,,,,,,60,,,60,,,60,60,,60,,,,,,60,,,,,,,,60,,,,,60,60,60,60,60,60',
',,,60,60,547,547,547,,547,,,,547,547,,,,547,,547,547,547,547,547,547',
'547,,,,,547,547,547,547,547,547,547,,,,,,,,,,547,,,547,547,547,547,547',
'547,547,547,547,547,,547,547,,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547',
',,547,547,,547,,,,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547',
'547,64,64,64,,64,,,,64,64,,,,64,,64,64,64,64,64,64,64,,,,,64,64,64,64',
'64,64,64,,,,,,,,,,64,,,64,64,64,64,64,64,64,64,64,64,,64,64,,,,64,,',
',,,,,,,,,,,,,,,,,64,,,64,,,64,64,,64,,64,,,,,,,,,,,,,,,,,64,64,64,64',
'64,64,,,,64,64,477,477,477,,477,,,,477,477,,,,477,,477,477,477,477,477',
'477,477,,,,,477,477,477,477,477,477,477,,,,,,,,,,477,,,477,477,477,477',
'477,477,477,477,477,477,,477,477,,477,477,477,,,,,,,,,,,,,,,,,,,,477',
',,477,,,477,477,,477,,,,,,477,,,,,,,,477,,,,,477,477,477,477,477,477',
',,,477,477,781,781,781,,781,,,,781,781,,,,781,,781,781,781,781,781,781',
'781,,,,,781,781,781,781,781,781,781,,,,,,,,,,781,,,781,781,781,781,781',
'781,781,781,781,781,,781,781,,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781',
',,781,781,,781,,,,,,781,,,,,,,,781,,,,,781,781,781,781,781,781,,,,781',
'781,325,325,325,,325,,,,325,325,,,,325,,325,325,325,325,325,325,325',
',,,,325,325,325,325,325,325,325,,,,,,,,,,325,,,325,325,325,325,325,325',
'325,325,325,325,,325,325,,,,325,,,,,,,,,,,,,,,,,,,,325,,,325,,,325,325',
',325,,,,,,,,,,,,,,,,,,,325,325,325,325,325,325,,,,325,325,327,327,327',
',327,,,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,327,327,327',
'327,327,327,327,,,,,,,,,,327,,,327,327,327,327,327,327,327,327,327,327',
',327,327,,,,327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,327,,,,,,,,',
',,,,,,,,,,327,327,327,327,327,327,,,,327,327,544,544,544,544,544,544',
'544,544,,,544,544,544,544,544,,,544,544,544,544,544,544,544,,,544,544',
'544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544,544',
'544,544,544,544,,,544,,,,,,,,544,544,,544,544,544,544,,544,544,,,544',
',,,,544,544,544,544,,,,,,,,,,,,,544,544,,544,544,544,544,544,544,544',
'544,544,,544,,,544,544,,,481,481,481,,481,,,544,481,481,,,,481,,481',
'481,481,481,481,481,481,,,,,481,481,481,481,481,481,481,,,481,,,,,,',
'481,,,481,481,481,481,481,481,481,481,481,481,,481,481,,481,481,481',
',,,,,,,,,,,,,,,,,,,481,,,481,,,481,481,,481,,,,,,481,,,,,,,,481,,,,',
'481,481,481,481,481,481,,,,481,481,526,526,526,,526,,,,526,526,,,,526',
',526,526,526,526,526,526,526,,,,,526,526,526,526,526,526,526,,,526,',
',,,,,526,,,526,526,526,526,526,526,526,526,526,526,,526,526,,526,526',
'526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,526,,,,,,526,,,,,,,,526',
',,,,526,526,526,526,526,526,,,,526,526,520,520,520,,520,,,,520,520,',
',,520,,520,520,520,520,520,520,520,,,,,520,520,520,520,520,520,520,',
',520,,,,,,,520,,,520,520,520,520,520,520,520,520,520,520,,520,520,,520',
'520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,520,,,,,,520,,,,,,,',
'520,,,,,520,520,520,520,520,520,,,,520,520,487,487,487,,487,,,,487,487',
',,,487,,487,487,487,487,487,487,487,,,,,487,487,487,487,487,487,487',
',,,,,,,,,487,,,487,487,487,487,487,487,487,487,487,487,,487,487,,487',
'487,487,,,,,,,,,,,,,,,,,,,,487,,,487,,,487,487,,487,,487,,,,487,,,,',
',,,487,,,,,487,487,487,487,487,487,,,,487,487,493,493,493,,493,,,,493',
'493,,,,493,,493,493,493,493,493,493,493,,,,,493,493,493,493,493,493',
'493,,,,,,,,,,493,,,493,493,493,493,493,493,493,493,493,493,,493,493',
',493,493,493,,,,,,,,,,,,,,,,,,,,493,,,493,,,493,493,,493,,,,,,493,,',
',,,,,493,,,,,493,493,493,493,493,493,,,,493,493,378,378,378,,378,,,',
'378,378,,,,378,,378,378,378,378,378,378,378,,,,,378,378,378,378,378',
'378,378,,,,,,,,,,378,,,378,378,378,378,378,378,378,378,378,378,,378',
'378,,378,378,378,,,,,,,,,,,,,,,,,,,,378,,,378,,,378,378,,378,,,,,,378',
',,,,,,,378,,,,,378,378,378,378,378,378,,,,378,378,21,21,21,,21,,,,21',
'21,,,,21,,21,21,21,21,21,21,21,,,,,21,21,21,21,21,21,21,,,,,,,,,,21',
',,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,,,,,,,,,,,,,,,',
'21,,,21,,,21,21,,21,,,,,,21,,,,,,,,21,,,,,21,21,21,21,21,21,,,,21,21',
'763,763,763,,763,,,,763,763,,,,763,,763,763,763,763,763,763,763,,,,',
'763,763,763,763,763,763,763,,,,,,,,,,763,,,763,763,763,763,763,763,763',
'763,763,763,,763,763,,763,763,763,,,,,,,,,,,,,,,,,,,,763,,,763,,,763',
'763,,763,,,,,,763,,,,,,,,763,,,,,763,763,763,763,763,763,,,,763,763',
'20,20,20,,20,,,,20,20,,,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20',
'20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20',
',,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,20,,,,,,20,,,,,,,,20,,,,,20,20,20',
'20,20,20,,,,20,20,366,366,366,366,366,366,366,366,,,366,366,366,366',
'366,,,366,366,366,366,366,366,366,,,366,366,366,366,366,366,366,366',
'366,366,366,366,366,366,366,366,366,366,366,366,366,366,366,,,366,,',
',,,,,366,366,,366,366,366,366,,366,366,,,366,,,,,366,366,366,366,,,',
',,,,,,,,,366,366,,366,366,366,366,366,366,366,366,366,,366,,,366,366',
',,237,237,237,,237,,,366,237,237,,,,237,,237,237,237,237,237,237,237',
',,,,237,237,237,237,237,237,237,,,,,,,,,,237,,,237,237,237,237,237,237',
'237,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,',
',237,237,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237',
'237,67,67,67,67,67,67,67,67,,,67,67,67,67,67,,,67,67,67,67,67,67,67',
',,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67',
'67,67,67,67,67,,,,,,,67,67,,67,67,67,67,,67,67,,,67,,,,,67,67,67,67',
',,,,,67,,,,,,,67,67,,67,67,67,67,67,67,67,67,67,,67,,,67,81,81,81,81',
'81,81,81,81,,,81,81,81,81,81,,,81,81,81,81,81,81,81,,,81,81,81,81,81',
'81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,,',
',,,,81,81,,81,81,81,81,,81,81,,,81,,,,,81,81,81,81,,,,,,,,,,,,,81,81',
',81,81,81,81,81,81,81,81,81,,81,,,81,672,672,672,672,672,672,672,672',
',,672,672,672,672,672,,,672,672,672,672,672,672,672,,,672,672,672,672',
'672,672,672,672,672,672,672,672,672,672,672,672,672,672,672,672,672',
'672,672,,,672,,,,,,,,672,672,,672,672,672,672,,672,672,,,672,,,,,672',
'672,672,672,,,,,,,,,,,,,672,672,,672,672,672,672,672,672,672,672,672',
',672,873,873,672,,873,,,,,,,,873,873,,873,873,873,873,,873,873,,,873',
',,,,873,873,873,873,,,,,,,,,,,,,873,873,,873,873,873,873,873,873,873',
'873,873,,873,197,197,873,,197,,,,,,,,197,197,,197,197,197,197,,197,197',
',,197,,,,,197,197,197,197,,,,,,,,,,,,,197,197,,197,197,197,197,197,197',
'197,197,197,,197,644,644,197,,644,,,,,,,,644,644,,644,644,644,644,,644',
'644,,,644,,,,,644,644,644,644,,,,,,,,,,,,,644,644,,644,644,644,644,644',
'644,644,644,644,,644,509,509,644,,509,,,,,,,,509,509,,509,509,509,509',
',509,509,,,509,,,,,509,509,509,509,,,,,,,,,,,,,509,509,,509,509,509',
'509,509,509,509,509,509,,509,196,196,509,,196,,,,,,,,196,196,,196,196',
'196,196,,196,196,,,196,,,,,196,196,196,196,,,,,,,,,,,,,196,196,,196',
'196,196,196,196,196,196,196,196,,196,646,646,196,,646,,,,,,,,646,646',
',646,646,646,646,,646,646,,,646,,,,,646,646,646,646,,,,,,,,,,,,,646',
'646,,646,646,646,646,646,646,646,646,646,,646,510,510,646,,510,,,,,',
',,510,510,,510,510,510,510,,510,510,,,510,,,,,510,510,510,510,,,,,,',
',,,,,,510,510,,510,510,510,510,510,510,510,510,510,,510,479,479,510',
',479,,,,,,,,479,479,,479,479,479,479,,479,479,,,479,,,,,479,479,479',
'479,,,,,,,,,,,,,479,479,,479,479,479,479,479,479,479,479,479,,479,256',
'256,479,,256,,,,,,,,256,256,,256,256,256,256,,256,256,,,256,,,,,256',
'256,256,256,,,,,,,,,,,,,256,256,,256,256,256,256,256,256,256,256,256',
',256,257,257,256,,257,,,,,,,,257,257,,257,257,257,257,,257,257,,,257',
',,,,257,257,257,257,,,,,,,,,,,,,257,257,,257,257,257,257,257,257,257',
'257,257,,257,,,257,830,830,830,830,830,830,830,830,830,830,830,,830',
'830,,,830,830,,,,,,,,,,,,,,830,,830,,830,830,830,830,830,830,830,,830',
',,,,,,470,470,,,470,,,,,830,,830,470,470,,470,470,470,470,,470,470,',
',470,,,,,470,470,470,470,,,,,,,,,,,,,470,470,,470,470,470,470,470,470',
'470,470,470,,470,469,469,470,,469,,,,,,,,469,469,,469,469,469,469,,469',
'469,,,469,,,,,469,469,469,469,,,,,,,,,,,,,469,469,,469,469,469,469,469',
'469,469,469,469,,469,400,400,469,,400,,,,,,,,400,400,,400,400,400,400',
',400,400,,,400,,,,,400,400,400,400,,,,,,,,,,,,,400,400,,400,400,400',
'400,400,400,400,400,400,,400,401,401,400,,401,,,,,,,,401,401,,401,401',
'401,401,,401,401,,,401,,,,,401,401,401,401,,,,,,,,,,,,,401,401,,401',
'401,401,401,401,401,401,401,401,,401,872,872,401,,872,,,,,,,,872,872',
',872,872,872,872,,872,872,,,872,,,,,872,872,872,872,,,,,,,,,,,,,872',
'872,,872,872,872,872,872,872,872,872,872,,872,600,600,872,,600,,,,,',
',,600,600,,600,600,600,600,,600,600,,,600,,,,,600,600,600,600,,,,,,',
',,,,,,600,600,,600,600,600,600,600,600,600,600,600,,600,599,599,600',
',599,,,,,,,,599,599,,599,599,599,599,,599,599,,,599,,,,,599,599,599',
'599,,,,,,,,,,,,,599,599,,599,599,599,599,599,599,599,599,599,,599,,',
'599,587,587,587,587,587,587,587,587,587,587,587,,587,587,,,587,587,',
',,587,,,,,,,,,,587,,587,,587,587,587,587,587,587,587,,587,,,,,,,478',
'478,,,478,,,,,587,,587,478,478,,478,478,478,478,,478,478,,,478,,,,,478',
'478,478,478,,,,,,,,,,,,,478,478,,478,478,478,478,478,478,478,478,478',
',478,,,478,432,432,432,432,432,432,432,432,432,432,432,,432,432,,,432',
'432,,,,,,,,,,,,,,432,,432,,432,432,432,432,432,432,432,,432,,691,691',
'691,691,691,691,691,691,691,691,691,,691,691,432,432,691,691,,,,,,,',
',,,,,,691,,691,,691,691,691,691,691,691,691,,691,681,681,681,681,681',
'681,681,681,681,681,681,,681,681,,691,681,681,,,,,,,,,,,,,,681,,681',
',681,681,681,681,681,681,681,,681,491,491,491,491,491,491,491,491,491',
'491,491,,491,491,,681,491,491,,,,,,,,,,,,,,491,,491,,491,491,491,491',
'491,491,491,,491,686,686,686,686,686,686,686,686,686,686,686,,686,686',
'491,491,686,686,,,,,,,,,,,,,,686,,686,,686,686,686,686,686,686,686,',
'686,22,22,22,22,22,22,22,22,22,22,22,,22,22,,686,22,22,,,,,,,,,,,,,',
'22,,22,,22,22,22,22,22,22,22,,22,688,688,688,688,688,688,688,688,688',
'688,688,,688,688,,22,688,688,,,,,,,,,,,,,,688,,688,,688,688,688,688',
'688,688,688,,688,383,383,383,383,383,383,383,383,383,383,383,,383,383',
',688,383,383,,,,,,,,,,,,,,383,,383,,383,383,383,383,383,383,383,,383',
'241,241,241,241,241,241,241,241,241,241,241,,241,241,,383,241,241,,',
',,,,,,,,,,,241,,241,,241,241,241,241,241,241,241,,241,693,693,693,693',
'693,693,693,693,693,693,693,,693,693,,241,693,693,,,,,,,,,,,,,,693,',
'693,,693,693,693,693,693,693,693,,693,480,480,480,480,480,480,480,480',
'480,480,480,,480,480,,693,480,480,,,,,,,,,,,,,,480,,480,,480,480,480',
'480,480,480,480,,480,698,698,698,698,698,698,698,698,698,698,698,,698',
'698,,480,698,698,,,,,,,,,,,,,,698,,698,,698,698,698,698,698,698,698',
',698,397,397,397,397,397,397,397,397,397,397,397,,397,397,,698,397,397',
',,,,,,,,,,,,,397,,397,,397,397,397,397,397,397,397,,397,731,731,731',
'731,731,731,731,731,731,731,731,,731,731,,397,731,731,,,,,,,,,,,,,,731',
',731,,731,731,731,731,731,731,731,,731,612,612,612,612,612,612,612,612',
'612,612,612,,612,612,731,731,612,612,,,,,,,,,,,,,,612,,612,,612,612',
'612,612,612,612,612,,612,776,776,776,776,776,776,776,776,776,776,776',
',776,776,,612,776,776,,,,,,,,,,,,,,776,,776,,776,776,776,776,776,776',
'776,,776,,,,,,,,,,,,,,,,776' ]
        racc_action_check = arr = Array.new(23770, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1105,  8146,  1104,   nil,   364,   nil,   782, 16306, 17506,
 17616,   nil,   995,   966,   965,  1010,   610,   460,   775,   nil,
 21200, 20960, 23206,  1047,   nil,     0,  2306,  2426,   638,   255,
  2786,   252,   nil,  4879, 16666, 16186,   nil,   939,   458,  1010,
   398, 13906,  8986,  8866,   940,   417,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   373,   nil, 17386,  3506,  3386,   126, 18448,
 19288,   nil,   nil,  4505, 19528,   981,   nil, 21552,   nil,   nil,
   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil,   nil,   932,
   920, 21661,   nil,   nil,   nil,  1586,   nil,   nil,  1226,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  4631,   nil,   nil,   nil, 15226, 14986, 14866, 14746, 14626,   892,
   nil,   733,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   907,   nil,
   923,  7541, 13426,  9466,  9346,  3026, 22065, 21888,  8386,  8506,
  8626,   nil,   531,   173,   976,    26,   898,   943,  7783,   nil,
   nil,  9586,  9706,  9826,  9946, 10066, 10186, 10306, 10426, 10546,
 10666, 10786, 10906, 11026, 11146, 11266, 11386, 11506, 11626, 11746,
 11866, 11986, 12106, 12226, 12346, 12466, 12586, 21432,   nil,   nil,
   nil, 23338,   nil,   901,   900, 13186,   nil, 13306,   939,   nil,
   nil,   nil,   nil, 13546,   nil,   nil, 22301, 22360,   930,  2906,
   nil,   934,   nil,   nil,   nil,  2666,   nil,   nil,   746,   925,
  6936,   924,   922,   875, 15106,  6452,   533,   619,   945,   530,
   907,   854,   112,   nil,   887,   685,   nil,   nil,   508,   909,
   901,   502,   nil,   899,   nil, 17026,   nil,  5847,   635,   nil,
   839,   240,   585, 17728,   868,   282,   842,   nil,   527,   nil,
   756,   174,   159, 18688, 18808,   429,   473,   821,   107,   441,
   893,    84,   921,   nil,   nil, 19888,   nil, 20008,   504,   624,
   651,   652,   200,   202,   431,   464,   nil,   618,   nil,   nil,
   nil,   nil,   366,   nil,   273,   nil,   345,   824,   301,   nil,
   823,   -32,   nil,   251,   nil,   nil,   nil,   nil,   nil,   867,
   nil,   nil,   nil,   nil,   nil,   nil, 21320,   nil,   nil,   nil,
   nil,  5363,   830,   nil,   nil,  4505,   nil,   813, 20840,   nil,
   812,   nil,   nil, 23294,   845,   387,   536,  2546,   nil,   nil,
   494,   824,   126,   nil,  3266,  4145,   nil, 23514,   nil,   nil,
 22590, 22649,  4265,   337, 14506, 14386, 14266,  2426,  1826,   426,
   596,   818,   816,   814,   810,  2786,  2666,  2906,  1466,  1946,
  2066,  2306,  2186,  1706,  1346,  1226,   986,  1106,   717,   603,
  1586,  2546, 22985,   364,   nil,  4025,   nil,   nil,  3905,   748,
   nil,  9226,   nil,  3790,   nil,   nil,  3736,   nil,   nil,   nil,
   nil,  3626,   nil,   266,   325,   783,   743,   102,   739,   828,
   766,   nil,   -87,   721,   nil,   nil,   nil,   751,  3146, 22531,
 22472,   615,   746,   nil,   nil, 16786, 18568, 19648, 22938, 22242,
 23426, 20240,   823,   817,   703,   nil,   nil, 20600,   nil,   nil,
  4385, 23118,   nil, 20720,   nil,   nil,   nil,  5726,   801,   nil,
   nil,  6089,    52,   185,   790,   753,  4758,   nil,  1106, 22006,
 22183,   180,   nil,   285,   440,   379,   nil,   505,   nil,    56,
 20480,   nil,  3756,   nil,   nil,   nil, 20360,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   307,   nil,   nil,
   nil,   627,   nil,   nil, 20128,   623,   nil, 19408, 19048,   nil,
   427, 18928, 18328,   631,   nil,   nil,   nil, 18208,   629,   nil,
 17848,   216,   205,   625,     0,   627,  4631, 16426,   nil,  8266,
   nil,   nil, 15946,   591,   nil,   604, 15706,   nil,   556,   nil,
   543,   nil,   nil,   nil,   nil,   nil,   201, 22873,   -80,   505,
 15586,   nil,   534,   nil,   nil,   nil,   nil,   465,   449, 22826,
 22767,  1946,   nil,    56,   nil,   437,    55,   117,   417,   406,
   347,   339, 23602,   319,   124,   278,   168, 13786,   nil,    75,
 12946,   nil,   nil,   637,   nil,   134,   nil,   nil,   nil,   nil,
   nil,    37,   nil,    15, 12826,   760,   112,   114,   149,   291,
  8746,   nil,   532,   nil, 21947,  2186, 22124,   nil,   nil,   nil,
   119,   574,  8025,  7299,   676,   149,    91,   130,   138,   nil,
   nil,   nil,   nil,   165,   nil,   nil,   nil,   nil,   262,   nil,
   nil,   287, 21770,   209,   731,  7178,   nil,   nil,   nil,   nil,
   nil, 23074,   416, 15346, 15466,   nil, 23162,   nil, 23250,   nil,
   nil, 23030,   nil, 23382, 15826, 17266, 17968,   220, 23470,   nil,
   630,  6694,   635,   nil,  1346,   678,   nil,  1466,   nil,  1706,
   689,   nil,   727,  5242,  5000,   nil,   nil,   740,   741,   313,
   804,   377,   nil,   829,   nil,  6210,   716,   758,   nil,   nil,
   nil, 23558,   838,   nil, 16066,   844,  6331,  6573,   nil,   nil,
   738,    31, 14146,   145,    91,   319,   536,   nil,   788,  5121,
  9106,   nil,   418,   903,   917,   813,   nil,   796,   nil,   874,
   nil,   nil,   662, 21080,   nil,   nil,   nil,   852,   nil,   nil,
   nil,   nil,   nil,   832,   nil,   nil, 23646, 12706,   nil,   935,
   nil, 19768,   nil,  5484,   822,   nil, 19168,   825, 18088,   nil,
   nil,   844,   945,   869,   nil,  5605,   nil,   nil,   116, 16906,
   nil,   nil,   nil,    48,   nil,   957,   958, 16546,  5968,   nil,
   nil,   nil,   966,    23,   nil,   nil,   nil,   895,   859,   860,
   nil,   nil,   866,   863,   nil,   nil,  3740,   nil,   nil,   nil,
 22407,   890,   nil,   986,   877,   nil,   866,   886,   nil,   nil,
   nil,   nil,  6815,   328,   266,   969,   449,   nil,  7662,   nil,
   nil, 13066,   504,  7904,   nil,   nil,  7057,   nil,   807,   nil,
   nil,   nil,  7420,   nil,   nil, 14026,   918,   nil, 17146,   nil,
  1050,  1826, 22708, 21829,   550,   105,   nil,   nil,   nil,   nil,
  1056,  1059,   945,  1062,   948,   nil,  2066,   952,   nil,   988,
    25,   145,   175,   468,   nil,   nil,   nil,   nil,   nil,   nil,
 13666,   nil,   472,   986,   nil ]

racc_action_default = [
    -1,  -508,  -506,  -508,    -2,  -495,    -5,    -6,  -508,  -508,
  -508,   -20,  -508,  -508,  -508,  -508,  -508,  -275,   -34,   -35,
  -508,  -508,   -40,   -42,   -43,  -287,  -324,  -325,   -47,  -253,
  -358,  -253,   -61,  -506,   -65,   -70,   -71,  -508,  -436,  -508,
  -508,  -508,  -508,  -508,  -497,  -218,  -268,  -269,  -270,  -271,
  -272,  -273,  -274,  -485,  -277,  -508,  -506,  -506,  -293,  -508,
  -508,  -297,  -300,  -495,  -508,  -309,  -316,  -508,  -326,  -327,
  -381,  -382,  -383,  -384,  -385,  -506,  -388,  -506,  -506,  -506,
  -506,  -506,  -415,  -421,  -422,  -425,  -426,  -427,  -428,  -429,
  -430,  -431,  -432,  -433,  -434,  -435,  -438,  -439,   905,    -4,
  -496,  -502,  -503,  -504,  -508,  -508,  -508,  -508,  -508,    -8,
    -9,  -508,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,   -14,  -105,
  -508,  -506,  -508,  -508,  -508,  -506,  -508,  -508,  -508,  -508,
  -508,   -38,  -508,  -436,  -508,  -275,  -508,  -508,  -506,   -39,
  -210,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,
  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,
  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -508,  -346,  -349,
   -44,  -219,  -232,  -507,  -507,  -508,  -240,  -508,  -263,  -287,
  -324,  -325,  -479,  -508,   -45,   -46,  -508,  -508,   -53,  -508,
  -292,  -508,  -359,  -362,   -59,  -506,  -357,   -60,  -508,   -61,
  -506,  -508,  -508,   -66,   -68,  -506,   -75,  -508,  -508,   -82,
  -290,  -497,  -352,  -328,  -358,  -508,   -69,   -73,  -283,  -423,
  -424,  -508,  -195,  -196,  -211,  -508,  -498,  -506,  -279,  -220,
  -497,  -499,  -499,  -508,  -508,  -499,  -508,  -476,  -499,  -294,
   -41,  -508,  -508,  -508,  -508,  -495,  -508,  -496,  -436,  -508,
  -508,  -275,  -508,  -340,  -341,  -508,  -312,  -508,   -96,   -97,
  -134,  -135,  -151,  -156,  -163,  -166,  -319,  -508,  -436,  -473,
  -474,  -386,  -508,  -401,  -508,  -403,  -508,  -508,  -508,  -393,
  -508,  -508,  -399,  -508,  -414,  -416,  -417,  -418,  -419,    -7,
  -505,   -15,   -16,   -17,   -18,   -19,  -508,   -11,   -12,   -13,
  -106,  -506,  -508,   -23,   -31,  -175,  -263,  -508,  -508,   -24,
   -32,   -33,   -25,  -177,  -508,  -486,  -487,  -506,  -488,  -489,
  -486,  -253,  -487,  -356,  -491,  -492,   -30,  -184,   -36,   -37,
  -508,  -508,  -506,  -283,  -508,  -508,  -508,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -197,  -198,  -199,  -200,  -201,
  -202,  -203,  -204,  -205,  -206,  -207,  -208,  -209,  -212,  -213,
  -214,  -215,  -508,  -506,  -233,  -508,  -262,  -235,  -508,  -507,
  -260,  -508,  -481,  -253,  -486,  -487,  -253,   -50,   -54,  -254,
  -255,  -256,  -353,  -506,  -506,  -508,  -497,  -497,  -507,  -232,
  -508,  -289,  -508,   -62,  -281,   -74,   -67,  -508,  -506,  -508,
  -508,   -81,  -508,  -423,  -424,  -508,  -508,  -508,  -508,  -508,
  -216,  -508,  -373,  -508,  -497,  -221,  -222,  -501,  -500,  -224,
  -501,  -497,  -285,  -501,  -478,  -286,  -477,  -506,  -329,  -330,
  -331,  -506,  -508,  -508,  -508,  -508,  -506,  -365,  -506,  -508,
  -508,  -283,  -306,   -91,   -92,  -508,   -94,  -508,  -275,  -508,
  -508,  -317,  -454,  -321,  -493,  -494,  -508,  -387,  -402,  -405,
  -406,  -408,  -389,  -404,  -390,  -391,  -392,  -508,  -395,  -397,
  -398,  -508,  -420,   -10,  -508,  -508,   -22,  -508,  -508,  -267,
  -284,  -508,  -508,   -55,  -230,  -231,  -354,  -508,   -57,  -355,
  -508,  -486,  -487,  -490,  -487,  -508,  -175,  -508,  -342,  -508,
  -344,  -347,  -508,  -507,  -261,  -264,  -508,  -480,  -508,  -239,
  -508,  -482,   -48,  -350,   -49,  -351,  -506,   -40,  -508,  -507,
  -508,  -252,  -508,  -258,  -360,  -363,  -226,  -508,  -508,  -508,
  -508,  -508,  -288,   -62,   -72,  -508,  -486,  -487,  -506,   -78,
   -80,  -508,  -183,  -193,  -194,  -508,  -506,  -506,  -278,  -508,
  -508,  -264,  -225,  -506,  -332,  -506,  -298,  -333,  -334,  -335,
  -301,  -508,  -304,  -508,  -508,  -508,  -486,  -487,  -490,  -282,
  -508,   -91,   -92,   -93,  -508,  -506,  -508,  -310,  -440,  -441,
  -508,  -313,  -506,  -506,  -454,  -508,  -472,  -472,  -472,  -453,
  -455,  -456,  -457,  -458,  -459,  -462,  -464,  -465,  -467,  -468,
  -469,  -508,  -508,  -497,  -508,  -506,  -394,  -396,  -400,  -107,
   -21,  -176,  -265,  -508,  -508,   -27,  -179,   -28,  -180,   -56,
   -29,  -181,   -58,  -182,  -508,  -508,  -508,  -284,  -217,  -343,
  -508,  -506,  -507,  -237,  -508,  -507,   -51,  -508,  -245,  -508,
  -507,  -257,  -508,  -506,  -506,  -227,  -228,  -506,  -506,  -497,
  -508,   -76,  -291,  -506,  -338,  -506,  -374,  -506,  -375,  -376,
  -280,  -497,  -508,  -336,  -508,  -508,  -506,  -506,  -303,  -305,
  -367,  -508,  -508,  -284,  -508,   -91,   -92,   -95,  -508,  -506,
  -508,  -443,  -508,  -508,  -508,  -497,  -445,  -508,  -449,  -508,
  -451,  -452,  -508,  -508,  -466,  -470,  -322,  -508,  -407,  -410,
  -411,  -412,  -413,  -508,  -266,   -26,  -178,  -508,  -345,  -508,
  -234,  -508,  -236,  -506,  -507,  -242,  -508,  -507,  -508,  -251,
  -259,  -508,  -508,  -508,    -3,  -506,  -380,  -339,  -508,  -508,
  -378,  -223,  -295,  -508,  -296,  -508,  -508,  -508,  -506,  -369,
  -307,  -284,  -508,  -508,  -314,  -318,  -320,  -508,  -472,  -472,
  -460,  -471,  -472,  -508,  -463,  -461,  -454,  -475,  -409,  -348,
  -507,  -508,  -241,  -508,  -507,  -247,  -508,  -507,  -361,  -364,
  -229,  -379,  -506,   -83,  -508,  -508,   -90,  -377,  -506,  -299,
  -302,  -508,  -506,  -506,  -311,  -442,  -506,  -444,  -508,  -447,
  -448,  -450,  -506,  -238,   -52,  -508,  -507,  -243,  -508,  -246,
  -373,  -506,  -508,  -508,   -89,  -506,  -368,  -366,  -370,  -371,
  -508,  -508,  -472,  -508,  -507,  -248,  -508,  -507,  -372,  -508,
  -486,  -487,  -490,   -88,  -337,  -308,  -315,  -446,  -323,  -244,
  -508,  -249,   -84,  -507,  -250 ]

clist = [
'210,336,322,295,241,241,241,457,103,304,283,283,244,244,244,355,616',
'120,120,324,292,293,294,99,311,312,659,577,315,448,505,653,115,115,266',
'241,241,110,189,732,283,246,246,246,308,483,118,118,374,381,286,643',
'242,242,242,497,501,583,626,630,585,824,243,243,243,109,103,271,433',
'361,362,363,364,240,254,255,528,201,269,577,339,316,538,300,258,264',
'267,723,571,209,115,4,306,519,305,521,735,309,592,449,593,758,760,761',
'115,544,486,489,594,595,494,273,298,496,344,346,310,310,353,647,310',
'783,272,586,819,337,822,523,297,484,313,736,314,737,640,853,325,749',
'520,752,856,327,652,522,672,826,712,701,384,453,713,454,714,741,877',
'634,727,359,659,798,824,310,310,310,310,365,341,342,190,348,537,375',
'241,383,241,387,391,397,366,351,747,768,674,675,354,750,755,818,188',
'100,210,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421',
'422,423,424,425,426,427,428,429,430,431,432,794,631,820,395,2,300,526',
'241,882,241,1,,377,377,,241,,,443,446,,241,,472,706,,,241,,244,241,',
',283,,244,,,244,398,399,,485,373,379,382,859,860,452,396,861,,,,677',
',,480,246,,,502,503,372,246,491,,246,,242,,266,466,,894,459,577,,242',
'243,272,577,,810,283,458,283,462,243,,450,,467,,,,456,,269,460,,103',
',269,,,878,689,,,897,,692,659,583,585,504,,862,,,,,,,,719,,,,,,,,,,',
',565,,241,,272,,,,,272,,,,,,310,310,,,120,,,,,387,391,241,,397,566,383',
',,,115,,,,,543,559,,,,,753,754,,118,888,,,,437,,,,,,241,597,598,241',
',,241,605,573,,395,577,,,,300,587,,,,,,,,589,,,,553,619,,,558,241,,611',
'622,,,,612,613,614,,611,16,545,635,,,,16,241,591,,241,,,241,728,,577',
',202,202,,,,202,202,202,808,,241,,611,16,277,277,395,,300,,812,582,',
',584,395,,,627,627,700,298,,,,202,202,,,202,202,,,202,319,648,,324,',
'681,241,,,686,688,,395,,300,691,15,615,693,,,842,15,,283,698,848,,,',
'241,120,,,241,,16,,,,202,202,202,202,16,879,115,15,241,,,679,,,,,651',
'717,718,241,118,,673,,,623,,573,,625,,,,,633,241,,748,731,,,,579,881',
'744,766,,,,883,,,241,,559,,,,685,687,,,611,241,690,,,720,,,,767,,,15',
',,,,,,,15,,,,,16,202,202,202,202,751,377,202,202,202,756,,,,241,776',
',16,,395,,,,740,300,686,688,691,,,793,,,,,241,,,241,,241,,801,,,,787',
'115,,310,,803,,,,,,,,,,,,,,,817,813,202,,,,,241,202,785,,202,15,16,',
',,277,16,,,,,703,,,,,241,15,784,,,627,,,,,775,708,16,814,776,,,,830',
',,,773,241,,241,,,202,202,,,,283,,,,,,,517,,517,,241,,,,779,310,,,,',
',,,,,,791,792,,15,,310,,,15,,241,,797,241,855,,,,866,,,,889,805,806',
',16,,241,,15,,,,,,,,,,,,241,,,241,,,241,,611,,,,,,,202,,,,,,241,780',
',,782,,,831,,789,,,,,241,,,,,841,,29,,,,,,29,,,,395,852,300,,,,,,29',
'29,15,,202,29,29,29,,,,,,29,,,,,,,,202,,,,,,870,,,,,,875,202,29,29,',
'880,29,29,,,29,832,,,835,,,16,,,,16,,,,,16,,202,,,,,,,,,,,,202,,,,,',
'202,29,,,,29,29,29,29,29,,863,,,,867,,,869,,,,,,13,202,202,,,,13,202',
',,,,,,,,,,,319,,,,885,,15,,,,15,,13,38,,15,,,,38,,,899,,,901,,,,,,,202',
',,,,,,,,904,,323,38,276,276,,,29,29,29,29,29,,,29,29,29,,,,,,,,29,,',
',,202,,,,318,202,,338,13,,,,16,16,,,13,,,,,,,,,,,,,,,,,,,16,,,,,38,',
',,202,,29,,38,,,,29,,,29,,29,,,,16,29,,,,,,,,,,,16,16,,,,,,,,,,29,16',
',,,,15,15,,,202,,16,16,,13,29,29,,,,,,,,16,202,,,15,,,13,,,,,,,,,,,',
',,,38,,,,,,,,15,,,,16,,,,,38,,,15,15,,,16,,,29,844,,,,15,,,,,16,,,,',
',15,15,,,13,,,,,13,,,,15,,29,,,,,,,,,,,,,16,,,13,,,16,,38,,,16,276,38',
'16,,,,,15,16,,,,,,,,17,202,,15,,,17,38,29,,,,,,,,15,,,,,,,,,29,,,,,',
'17,279,279,,338,,338,29,,,,,,,,,,,13,15,,,,29,,15,,29,,,15,321,29,15',
'29,,,,,15,,,,,,,29,,,,38,,29,,,,,,,,,,,299,307,,,17,,,,,,,,17,,29,29',
',,,343,29,345,345,349,352,345,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'29,,,,,,,,,,,,,,,,,13,,,,13,,,,,13,,,,,17,,,,,,,,29,,,,,29,,,,17,38',
',29,29,38,,,,,38,,,,,,,,,,,,,,,,29,299,,,,,,,,29,,,,,,323,,,,,,,,,,',
'29,,,,,,,,,,17,,29,29,279,17,,,,,,318,,,29,,376,380,,,,,,29,,29,29,17',
',,,,,,,455,,,29,29,,,,,,,,,,,,,,,,518,,518,,,,,13,13,,,,,,439,,440,29',
',,,,442,,,,,,,29,13,,,,,,,,,38,38,,29,,,,17,,,,,,,,,,13,,,,,,38,,,,',
',13,13,,,,,,,29,,,,13,,29,,,,,29,38,,29,13,13,,,,29,,,,38,38,554,,13',
'29,,,,,,,38,,,,,299,,,,,,38,38,,,,,,,,,,,,38,,13,,,,,,,,,549,568,,13',
',,,847,,,,554,,,554,,13,,,,,568,568,38,,17,,,,17,,,,,17,38,299,,,843',
',,,,,,,,38,,13,,,,,,13,575,,,578,13,,581,13,,,,,,13,,,588,,,299,,,,',
',38,,,,,,38,,,,,38,,,38,321,,,,,38,,,,,,,621,,,578,,,621,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,568,,,,,,,,,,,,,,,,682,,,,,,554,,,,17,17',
',,724,729,,,,,,724,,724,702,,,,705,,,,772,17,,,,,,,,,710,299,,,,,,,',
',,575,,,,,,17,,,,,,,,,,726,,17,17,,,,,,,,,,,17,,,376,,,,,,,,17,17,,',
',,,,,,,,,17,,,,,,,,554,554,,,,,796,,,,800,,,,,,,,,,774,,,,,,17,,,,,',
',,,,,,17,,,578,846,,,,578,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,809,,,,',
',17,,,,,,17,,,,,17,,,17,825,,,,,17,,,,,,,,,,,,,,,,,,834,,837,,,,,,,',
',,724,,,,,,,,,621,,,,,,,,,,299,,,,724,,,,,,,,,,,,575,,,578,,,,,,,,,',
',,,,,876,,,,,,,,,,,,,,884,,,887,,,,,,,,,,,,,,,,,,578,,,,,,,,,,,,,,903' ]
        racc_goto_table = arr = Array.new(2320, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,48,84,55,28,28,28,32,86,21,56,56,59,59,59,48,5,53,53,18,28,28,28',
'9,15,15,141,147,15,35,83,87,49,49,60,28,28,13,13,81,56,63,63,63,59,3',
'52,52,23,23,44,46,29,29,29,80,80,61,82,82,61,143,57,57,57,11,86,41,109',
'15,15,15,15,31,31,31,129,25,40,147,76,9,129,29,34,34,34,6,36,17,49,2',
'77,47,57,47,6,78,67,65,64,140,140,140,49,54,58,58,36,36,58,43,25,58',
'126,126,25,25,126,85,25,38,2,37,139,88,139,89,90,91,92,93,94,95,96,97',
'98,99,100,101,102,103,104,105,106,107,68,110,21,113,114,115,116,117',
'118,119,120,11,141,121,143,25,25,25,25,11,124,125,27,127,128,28,28,28',
'28,33,33,28,26,130,46,131,132,133,134,135,136,138,14,12,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'7,83,142,49,4,29,146,28,139,28,1,,57,57,,28,,,33,33,,28,,55,36,,,28',
',59,28,,,56,,59,,,59,25,25,,55,17,17,17,140,140,60,17,140,,,,129,,,28',
'63,,,15,15,2,63,28,,63,,29,,60,44,,81,29,147,,29,57,2,147,,82,56,57',
'56,41,57,,31,,41,,,,31,,40,31,,86,,40,,,6,35,,,140,,35,141,61,61,9,',
'87,,,,,,,,32,,,,,,,,,,,,21,,28,,2,,,,,2,,,,,,25,25,,,53,,,,,33,33,28',
',28,28,28,,,,49,,,,,13,60,,,,,3,3,,52,5,,,,62,,,,,,28,55,55,28,,,28',
'21,59,,49,147,,,,29,28,,,,,,,,59,,,,34,55,,,34,28,,33,55,,,,28,28,28',
',33,20,2,21,,,,20,28,63,,28,,,28,23,,147,,20,20,,,,20,20,20,80,,28,',
'33,20,20,20,49,,29,,3,34,,,34,49,,,86,86,84,25,,,,20,20,,,20,20,,,20',
'20,86,,18,,28,28,,,28,28,,49,,29,28,19,25,28,,,80,19,,56,28,80,,,,28',
'53,,,28,,20,,,,20,20,20,20,20,83,49,19,28,,,13,,,,,25,33,33,28,52,,25',
',,2,,59,,2,,,,,2,28,,21,28,,,,62,3,15,48,,,,3,,,28,,60,,,,17,17,,,33',
'28,17,,,29,,,,55,,,19,,,,,,,,19,,,,,20,20,20,20,20,86,57,20,20,20,86',
',,,28,28,,20,,49,,,,57,29,28,28,28,,,55,,,,,28,,,28,,28,,55,,,,59,49',
',25,,15,,,,,,,,,,,,,,,55,15,20,,,,,28,20,63,,20,19,20,,,,20,20,,,,,62',
',,,,28,19,57,,,86,,,,,17,62,20,86,28,,,,28,,,,2,28,,28,,,20,20,,,,56',
',,,,,,20,,20,,28,,,,2,25,,,,,,,,,,,2,2,,19,,25,,,19,,28,,2,28,86,,,',
'59,,,,21,2,2,,20,,28,,19,,,,,,,,,,,,28,,,28,,,28,,33,,,,,,,20,,,,,,28',
'62,,,62,,,2,,62,,,,,28,,,,,2,,39,,,,,,39,,,,49,2,29,,,,,,39,39,19,,20',
'39,39,39,,,,,,39,,,,,,,,20,,,,,,2,,,,,,2,20,39,39,,2,39,39,,,39,62,',
',62,,,20,,,,20,,,,,20,,20,,,,,,,,,,,,20,,,,,,20,39,,,,39,39,39,39,39',
',62,,,,62,,,62,,,,,,16,20,20,,,,16,20,,,,,,,,,,,,20,,,,62,,19,,,,19',
',16,45,,19,,,,45,,,62,,,62,,,,,,,20,,,,,,,,,62,,16,45,45,45,,,39,39',
'39,39,39,,,39,39,39,,,,,,,,39,,,,,20,,,,45,20,,45,16,,,,20,20,,,16,',
',,,,,,,,,,,,,,,,,20,,,,,45,,,,20,,39,,45,,,,39,,,39,,39,,,,20,39,,,',
',,,,,,,20,20,,,,,,,,,,39,20,,,,,19,19,,,20,,20,20,,16,39,39,,,,,,,,20',
'20,,,19,,,16,,,,,,,,,,,,,,,45,,,,,,,,19,,,,20,,,,,45,,,19,19,,,20,,',
'39,20,,,,19,,,,,20,,,,,,19,19,,,16,,,,,16,,,,19,,39,,,,,,,,,,,,,20,',
',16,,,20,,45,,,20,45,45,20,,,,,19,20,,,,,,,,22,20,,19,,,22,45,39,,,',
',,,,19,,,,,,,,,39,,,,,,22,22,22,,45,,45,39,,,,,,,,,,,16,19,,,,39,,19',
',39,,,19,22,39,19,39,,,,,19,,,,,,,39,,,,45,,39,,,,,,,,,,,10,10,,,22',
',,,,,,,22,,39,39,,,,10,39,10,10,10,10,10,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,39,,,,,,,,,,,,,,,,,16,,,,16,,,,,16,,,,,22,,,,,,,,39,,,,,39',
',,,22,45,,39,39,45,,,,,45,,,,,,,,,,,,,,,,39,10,,,,,,,,39,,,,,,16,,,',
',,,,,,,39,,,,,,,,,,22,,39,39,22,22,,,,,,45,,,39,,24,24,,,,,,39,,39,39',
'22,,,,,,,,10,,,39,39,,,,,,,,,,,,,,,,22,,22,,,,,16,16,,,,,,24,,24,39',
',,,,24,,,,,,,39,16,,,,,,,,,45,45,,39,,,,22,,,,,,,,,,16,,,,,,45,,,,,',
'16,16,,,,,,,39,,,,16,,39,,,,,39,45,,39,16,16,,,,39,,,,45,45,10,,16,39',
',,,,,,45,,,,,10,,,,,,45,45,,,,,,,,,,,,45,,16,,,,,,,,,24,10,,16,,,,16',
',,,10,,,10,,16,,,,,10,10,45,,22,,,,22,,,,,22,45,10,,,45,,,,,,,,,45,',
'16,,,,,,16,24,,,24,16,,24,16,,,,,,16,,,24,,,10,,,,,,45,,,,,,45,,,,,45',
',,45,22,,,,,45,,,,,,,24,,,24,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,10,,,,,,,,,,,,,,,,24,,,,,,10,,,,22,22,,,10,10,,,,,,10,,10,24,,,',
'24,,,,22,22,,,,,,,,,24,10,,,,,,,,,,24,,,,,,22,,,,,,,,,,24,,22,22,,,',
',,,,,,,22,,,24,,,,,,,,22,22,,,,,,,,,,,,22,,,,,,,,10,10,,,,,10,,,,10',
',,,,,,,,,24,,,,,,22,,,,,,,,,,,,22,,,24,22,,,,24,,,,,22,,,,,,,,,,,,,',
',,,,,,,,,,,,,,24,,,,,,22,,,,,,22,,,,,22,,,22,24,,,,,22,,,,,,,,,,,,,',
',,,,24,,24,,,,,,,,,,10,,,,,,,,,24,,,,,,,,,,10,,,,10,,,,,,,,,,,,24,,',
'24,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,24,,,24,,,,,,,,,,,,,,,,,,24,,,,,,,',
',,,,,,24' ]
        racc_goto_check = arr = Array.new(2320, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   227,    89,  -252,   221,  -466,  -529,  -506,   nil,    18,
  1365,    57,   184,    28,   178,   -35,  1005,    68,   -45,   535,
   457,   -47,  1325,  -144,  1419,    57,    68,   157,   -21,    27,
   nil,    48,  -258,   -21,    55,  -229,  -345,  -324,  -585,   884,
    45,    34,   nil,    77,    15,  1037,  -464,  -232,   -66,    23,
   nil,   nil,    37,     8,  -265,   -41,   -24,    37,  -195,   -13,
     4,  -386,   164,    16,  -351,  -160,   nil,  -353,  -447,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    13,    35,    39,   nil,
  -256,  -584,  -444,  -286,   -62,  -400,     3,  -491,    58,  -210,
    74,  -169,    69,  -495,    70,  -497,  -378,  -675,    71,  -510,
  -188,  -512,  -674,    75,  -379,  -193,  -379,  -621,   nil,  -170,
  -424,   nil,   nil,  -113,  -444,  -112,  -443,  -481,  -698,  -352,
  -461,  -568,   nil,   nil,    93,    92,    37,    90,  -178,  -266,
    99,  -493,  -348,  -348,   103,  -464,  -468,   nil,  -570,  -633,
  -555,  -496,  -538,  -698,   nil,   nil,  -117,  -411 ]

racc_goto_default = [
   nil,   nil,   482,   nil,   nil,   nil,   733,   nil,     5,   nil,
     6,     7,   317,   nil,   nil,   nil,   206,    19,    14,   207,
   291,   nil,   205,   nil,   248,    18,   nil,   nil,    22,    23,
    24,   nil,    28,   608,   nil,   nil,   nil,   nil,   nil,   282,
    32,   nil,    34,    37,    36,   203,   516,   nil,   117,   389,
   116,   119,    71,    72,   nil,   nil,    45,   301,   nil,   302,
   555,   556,   434,   574,   nil,   nil,   259,   nil,   nil,   436,
    46,    47,    48,    49,    50,    51,    52,   nil,   260,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   498,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   239,   nil,
   nil,   393,   261,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    70,    73,    74,   nil,   nil,   nil,   nil,   533,
   nil,   nil,   nil,   nil,   nil,   nil,   655,   656,   657,   658,
   nil,   821,   664,   665,   668,   671,   nil,   252 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 137, :_reduce_1,
  2, 134, :_reduce_2,
  4, 136, :_reduce_3,
  2, 135, :_reduce_4,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_7,
  2, 141, :_reduce_8,
  0, 159, :_reduce_9,
  4, 144, :_reduce_10,
  3, 144, :_reduce_11,
  3, 144, :_reduce_12,
  3, 144, :_reduce_13,
  2, 144, :_reduce_14,
  3, 144, :_reduce_15,
  3, 144, :_reduce_16,
  3, 144, :_reduce_17,
  3, 144, :_reduce_18,
  3, 144, :_reduce_19,
  0, 160, :_reduce_20,
  5, 144, :_reduce_21,
  4, 144, :_reduce_22,
  3, 144, :_reduce_23,
  3, 144, :_reduce_24,
  3, 144, :_reduce_25,
  6, 144, :_reduce_26,
  5, 144, :_reduce_27,
  5, 144, :_reduce_28,
  5, 144, :_reduce_29,
  3, 144, :_reduce_30,
  3, 144, :_reduce_31,
  3, 144, :_reduce_32,
  3, 144, :_reduce_33,
  1, 144, :_reduce_none,
  1, 158, :_reduce_none,
  3, 158, :_reduce_36,
  3, 158, :_reduce_37,
  2, 158, :_reduce_38,
  2, 158, :_reduce_39,
  1, 158, :_reduce_none,
  1, 148, :_reduce_41,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_44,
  2, 150, :_reduce_45,
  2, 150, :_reduce_46,
  1, 163, :_reduce_none,
  4, 163, :_reduce_48,
  4, 163, :_reduce_49,
  0, 170, :_reduce_50,
  0, 171, :_reduce_51,
  6, 168, :_reduce_52,
  2, 162, :_reduce_53,
  3, 162, :_reduce_54,
  4, 162, :_reduce_55,
  5, 162, :_reduce_56,
  4, 162, :_reduce_57,
  5, 162, :_reduce_58,
  2, 162, :_reduce_59,
  2, 162, :_reduce_60,
  1, 151, :_reduce_none,
  3, 151, :_reduce_62,
  1, 174, :_reduce_none,
  3, 174, :_reduce_64,
  1, 173, :_reduce_65,
  2, 173, :_reduce_66,
  3, 173, :_reduce_67,
  2, 173, :_reduce_68,
  2, 173, :_reduce_69,
  1, 173, :_reduce_70,
  1, 176, :_reduce_none,
  3, 176, :_reduce_72,
  2, 175, :_reduce_73,
  3, 175, :_reduce_74,
  1, 177, :_reduce_75,
  4, 177, :_reduce_76,
  3, 177, :_reduce_77,
  3, 177, :_reduce_78,
  3, 177, :_reduce_79,
  3, 177, :_reduce_80,
  2, 177, :_reduce_81,
  1, 177, :_reduce_82,
  1, 149, :_reduce_83,
  4, 149, :_reduce_84,
  3, 149, :_reduce_85,
  3, 149, :_reduce_86,
  3, 149, :_reduce_87,
  3, 149, :_reduce_88,
  2, 149, :_reduce_89,
  1, 149, :_reduce_90,
  1, 179, :_reduce_91,
  1, 179, :_reduce_none,
  2, 180, :_reduce_93,
  1, 180, :_reduce_94,
  3, 180, :_reduce_95,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_99,
  1, 181, :_reduce_100,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 146, :_reduce_103,
  1, 146, :_reduce_none,
  1, 147, :_reduce_105,
  0, 187, :_reduce_106,
  4, 147, :_reduce_107,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  3, 161, :_reduce_175,
  5, 161, :_reduce_176,
  3, 161, :_reduce_177,
  6, 161, :_reduce_178,
  5, 161, :_reduce_179,
  5, 161, :_reduce_180,
  5, 161, :_reduce_181,
  5, 161, :_reduce_182,
  4, 161, :_reduce_183,
  3, 161, :_reduce_184,
  3, 161, :_reduce_185,
  3, 161, :_reduce_186,
  3, 161, :_reduce_187,
  3, 161, :_reduce_188,
  3, 161, :_reduce_189,
  3, 161, :_reduce_190,
  3, 161, :_reduce_191,
  3, 161, :_reduce_192,
  4, 161, :_reduce_193,
  4, 161, :_reduce_194,
  2, 161, :_reduce_195,
  2, 161, :_reduce_196,
  3, 161, :_reduce_197,
  3, 161, :_reduce_198,
  3, 161, :_reduce_199,
  3, 161, :_reduce_200,
  3, 161, :_reduce_201,
  3, 161, :_reduce_202,
  3, 161, :_reduce_203,
  3, 161, :_reduce_204,
  3, 161, :_reduce_205,
  3, 161, :_reduce_206,
  3, 161, :_reduce_207,
  3, 161, :_reduce_208,
  3, 161, :_reduce_209,
  2, 161, :_reduce_210,
  2, 161, :_reduce_211,
  3, 161, :_reduce_212,
  3, 161, :_reduce_213,
  3, 161, :_reduce_214,
  3, 161, :_reduce_215,
  3, 161, :_reduce_216,
  5, 161, :_reduce_217,
  1, 161, :_reduce_none,
  1, 157, :_reduce_219,
  1, 154, :_reduce_none,
  2, 154, :_reduce_221,
  2, 154, :_reduce_222,
  5, 154, :_reduce_223,
  2, 154, :_reduce_224,
  3, 154, :_reduce_225,
  3, 193, :_reduce_226,
  4, 193, :_reduce_227,
  4, 193, :_reduce_228,
  6, 193, :_reduce_229,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 164, :_reduce_232,
  2, 164, :_reduce_233,
  5, 164, :_reduce_234,
  2, 164, :_reduce_235,
  5, 164, :_reduce_236,
  4, 164, :_reduce_237,
  7, 164, :_reduce_238,
  3, 164, :_reduce_239,
  1, 164, :_reduce_none,
  4, 197, :_reduce_241,
  3, 197, :_reduce_242,
  5, 197, :_reduce_243,
  7, 197, :_reduce_244,
  2, 197, :_reduce_245,
  5, 197, :_reduce_246,
  4, 197, :_reduce_247,
  6, 197, :_reduce_248,
  7, 197, :_reduce_249,
  9, 197, :_reduce_250,
  3, 197, :_reduce_251,
  1, 197, :_reduce_none,
  0, 199, :_reduce_253,
  2, 167, :_reduce_254,
  1, 198, :_reduce_none,
  0, 200, :_reduce_256,
  3, 198, :_reduce_257,
  0, 201, :_reduce_258,
  4, 198, :_reduce_259,
  2, 196, :_reduce_260,
  2, 195, :_reduce_261,
  1, 195, :_reduce_none,
  1, 190, :_reduce_263,
  3, 190, :_reduce_264,
  3, 156, :_reduce_265,
  4, 156, :_reduce_266,
  2, 156, :_reduce_267,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_276,
  0, 223, :_reduce_277,
  4, 189, :_reduce_278,
  0, 224, :_reduce_279,
  5, 189, :_reduce_280,
  3, 189, :_reduce_281,
  3, 189, :_reduce_282,
  2, 189, :_reduce_283,
  4, 189, :_reduce_284,
  3, 189, :_reduce_285,
  3, 189, :_reduce_286,
  1, 189, :_reduce_287,
  4, 189, :_reduce_288,
  3, 189, :_reduce_289,
  1, 189, :_reduce_290,
  5, 189, :_reduce_291,
  2, 189, :_reduce_292,
  1, 189, :_reduce_none,
  2, 189, :_reduce_294,
  6, 189, :_reduce_295,
  6, 189, :_reduce_296,
  0, 225, :_reduce_297,
  0, 226, :_reduce_298,
  7, 189, :_reduce_299,
  0, 227, :_reduce_300,
  0, 228, :_reduce_301,
  7, 189, :_reduce_302,
  5, 189, :_reduce_303,
  4, 189, :_reduce_304,
  5, 189, :_reduce_305,
  0, 229, :_reduce_306,
  0, 230, :_reduce_307,
  9, 189, :_reduce_308,
  0, 231, :_reduce_309,
  0, 232, :_reduce_310,
  7, 189, :_reduce_311,
  0, 233, :_reduce_312,
  0, 234, :_reduce_313,
  0, 235, :_reduce_314,
  9, 189, :_reduce_315,
  0, 236, :_reduce_316,
  0, 237, :_reduce_317,
  6, 189, :_reduce_318,
  0, 238, :_reduce_319,
  6, 189, :_reduce_320,
  0, 239, :_reduce_321,
  0, 240, :_reduce_322,
  9, 189, :_reduce_323,
  1, 189, :_reduce_324,
  1, 189, :_reduce_325,
  1, 189, :_reduce_326,
  1, 189, :_reduce_327,
  1, 153, :_reduce_328,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  2, 213, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 214, :_reduce_none,
  5, 214, :_reduce_337,
  1, 139, :_reduce_none,
  2, 139, :_reduce_339,
  1, 217, :_reduce_none,
  1, 217, :_reduce_341,
  1, 169, :_reduce_none,
  2, 169, :_reduce_343,
  1, 169, :_reduce_344,
  3, 169, :_reduce_345,
  0, 242, :_reduce_346,
  0, 243, :_reduce_347,
  6, 241, :_reduce_348,
  2, 165, :_reduce_349,
  4, 165, :_reduce_350,
  4, 165, :_reduce_351,
  0, 245, :_reduce_352,
  3, 212, :_reduce_353,
  4, 212, :_reduce_354,
  4, 212, :_reduce_355,
  3, 212, :_reduce_356,
  2, 212, :_reduce_357,
  1, 212, :_reduce_358,
  0, 246, :_reduce_359,
  0, 247, :_reduce_360,
  6, 211, :_reduce_361,
  0, 248, :_reduce_362,
  0, 249, :_reduce_363,
  6, 211, :_reduce_364,
  0, 252, :_reduce_365,
  6, 216, :_reduce_366,
  1, 250, :_reduce_none,
  4, 250, :_reduce_368,
  2, 250, :_reduce_369,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  6, 138, :_reduce_372,
  0, 138, :_reduce_373,
  1, 253, :_reduce_374,
  1, 253, :_reduce_none,
  1, 253, :_reduce_none,
  2, 254, :_reduce_377,
  1, 254, :_reduce_none,
  2, 140, :_reduce_379,
  1, 140, :_reduce_none,
  1, 203, :_reduce_381,
  1, 203, :_reduce_382,
  1, 203, :_reduce_none,
  1, 204, :_reduce_384,
  1, 256, :_reduce_none,
  2, 256, :_reduce_386,
  3, 257, :_reduce_387,
  1, 257, :_reduce_388,
  3, 205, :_reduce_389,
  3, 206, :_reduce_390,
  3, 207, :_reduce_391,
  3, 207, :_reduce_392,
  1, 260, :_reduce_393,
  3, 260, :_reduce_394,
  1, 261, :_reduce_none,
  2, 261, :_reduce_396,
  3, 208, :_reduce_397,
  3, 208, :_reduce_398,
  1, 263, :_reduce_399,
  3, 263, :_reduce_400,
  1, 258, :_reduce_401,
  2, 258, :_reduce_402,
  1, 259, :_reduce_403,
  2, 259, :_reduce_404,
  1, 262, :_reduce_405,
  0, 265, :_reduce_406,
  3, 262, :_reduce_407,
  0, 266, :_reduce_408,
  4, 262, :_reduce_409,
  1, 264, :_reduce_410,
  1, 264, :_reduce_411,
  1, 264, :_reduce_412,
  1, 264, :_reduce_none,
  2, 185, :_reduce_414,
  1, 185, :_reduce_415,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  1, 267, :_reduce_none,
  3, 186, :_reduce_420,
  1, 255, :_reduce_none,
  1, 255, :_reduce_none,
  2, 255, :_reduce_423,
  2, 255, :_reduce_424,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_430,
  1, 178, :_reduce_431,
  1, 178, :_reduce_432,
  1, 178, :_reduce_433,
  1, 178, :_reduce_434,
  1, 178, :_reduce_435,
  1, 209, :_reduce_436,
  1, 152, :_reduce_437,
  1, 155, :_reduce_438,
  1, 155, :_reduce_439,
  1, 218, :_reduce_440,
  0, 268, :_reduce_441,
  4, 218, :_reduce_442,
  2, 218, :_reduce_443,
  4, 220, :_reduce_444,
  2, 220, :_reduce_445,
  6, 269, :_reduce_446,
  4, 269, :_reduce_447,
  4, 269, :_reduce_448,
  2, 269, :_reduce_449,
  4, 269, :_reduce_450,
  2, 269, :_reduce_451,
  2, 269, :_reduce_452,
  1, 269, :_reduce_453,
  0, 269, :_reduce_454,
  1, 275, :_reduce_455,
  1, 275, :_reduce_456,
  1, 275, :_reduce_457,
  1, 275, :_reduce_458,
  1, 270, :_reduce_459,
  3, 270, :_reduce_460,
  3, 276, :_reduce_461,
  1, 271, :_reduce_462,
  3, 271, :_reduce_463,
  1, 277, :_reduce_none,
  1, 277, :_reduce_none,
  2, 272, :_reduce_466,
  1, 272, :_reduce_467,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  2, 274, :_reduce_470,
  2, 273, :_reduce_471,
  0, 273, :_reduce_472,
  1, 221, :_reduce_none,
  0, 279, :_reduce_474,
  5, 221, :_reduce_475,
  1, 210, :_reduce_476,
  2, 210, :_reduce_477,
  2, 210, :_reduce_478,
  1, 192, :_reduce_none,
  3, 192, :_reduce_480,
  2, 280, :_reduce_481,
  3, 280, :_reduce_482,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  0, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 219, :_reduce_502,
  1, 219, :_reduce_none,
  1, 145, :_reduce_none,
  2, 145, :_reduce_505,
  0, 143, :_reduce_506,
  0, 202, :_reduce_507 ]

racc_reduce_n = 508

racc_shift_n = 905

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tSYMBOL => 121,
  :tNL => 122,
  :tEH => 123,
  :tCOLON => 124,
  :tCOMMA => 125,
  :tSPACE => 126,
  :tSEMI => 127,
  :tLAST_TOKEN => 128,
  :tHASHKEY => 129,
  :tEQL => 130,
  :tLOWEST => 131,
  "[" => 132 }

racc_nt_base = 133

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tHASHKEY",
  "tEQL",
  "tLOWEST",
  "\"[\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 48)
  def _reduce_1(val, _values, result)
                          self.lexer.lex_state = :expr_beg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 52)
  def _reduce_2(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 57)
  def _reduce_3(val, _values, result)
                          result = new_body val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 62)
  def _reduce_4(val, _values, result)
                          result = new_compstmt val
                    
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 69)
  def _reduce_7(val, _values, result)
                          result = self.block_append val[0], val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 73)
  def _reduce_8(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 78)
  def _reduce_9(val, _values, result)
                          lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 83)
  def _reduce_10(val, _values, result)
                          result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 87)
  def _reduce_11(val, _values, result)
                          result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 91)
  def _reduce_12(val, _values, result)
                          result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 95)
  def _reduce_13(val, _values, result)
                          yyerror "can't make alias for the number variables"
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 99)
  def _reduce_14(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 103)
  def _reduce_15(val, _values, result)
                          result = new_if val[2], val[0], nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 107)
  def _reduce_16(val, _values, result)
                          result = new_if val[2], nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 111)
  def _reduce_17(val, _values, result)
                          result = new_while val[0], val[2], true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 115)
  def _reduce_18(val, _values, result)
                          result = new_until val[0], val[2], true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 119)
  def _reduce_19(val, _values, result)
                          result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 123)
  def _reduce_20(val, _values, result)
                          if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 130)
  def _reduce_21(val, _values, result)
                          result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 135)
  def _reduce_22(val, _values, result)
                          if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 142)
  def _reduce_23(val, _values, result)
                          result = self.node_assign val[0], val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 146)
  def _reduce_24(val, _values, result)
                          result = new_masgn val[0], val[2], :wrap
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 150)
  def _reduce_25(val, _values, result)
                          result = new_op_asgn val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 154)
  def _reduce_26(val, _values, result)
                          result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 158)
  def _reduce_27(val, _values, result)
                          result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 162)
  def _reduce_28(val, _values, result)
                          result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 166)
  def _reduce_29(val, _values, result)
                          result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 170)
  def _reduce_30(val, _values, result)
                          self.backref_assign_error val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 174)
  def _reduce_31(val, _values, result)
                          result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 178)
  def _reduce_32(val, _values, result)
                          result = new_masgn val[0], val[2], :wrap
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 182)
  def _reduce_33(val, _values, result)
                          result = new_masgn val[0], val[2]
                    
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 189)
  def _reduce_36(val, _values, result)
                          result = logop(:and, val[0], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 193)
  def _reduce_37(val, _values, result)
                          result = logop(:or, val[0], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 197)
  def _reduce_38(val, _values, result)
                          result = s(:not, val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 201)
  def _reduce_39(val, _values, result)
                          result = s(:not, val[1])
                    
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 207)
  def _reduce_41(val, _values, result)
                          result = value_expr(val[0])
                    
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 214)
  def _reduce_44(val, _values, result)
                          line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 219)
  def _reduce_45(val, _values, result)
                          line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 224)
  def _reduce_46(val, _values, result)
                          line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
  end
.,.,

# reduce 47 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 231)
  def _reduce_48(val, _values, result)
                          result = new_call val[0], val[2], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 235)
  def _reduce_49(val, _values, result)
                          result = new_call val[0], val[2], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 240)
  def _reduce_50(val, _values, result)
                          self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 245)
  def _reduce_51(val, _values, result)
                          result = self.env.dynamic.keys
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 249)
  def _reduce_52(val, _values, result)
                          result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 255)
  def _reduce_53(val, _values, result)
                          result = new_call nil, val[0].to_sym, val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 259)
  def _reduce_54(val, _values, result)
                          result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 270)
  def _reduce_55(val, _values, result)
                          result = new_call val[0], val[2].to_sym, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 274)
  def _reduce_56(val, _values, result)
                          result = new_call val[0], val[2].to_sym, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 278)
  def _reduce_57(val, _values, result)
                          result = new_call val[0], val[2].to_sym, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 282)
  def _reduce_58(val, _values, result)
                          result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 293)
  def _reduce_59(val, _values, result)
                          result = new_super val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 297)
  def _reduce_60(val, _values, result)
                          result = new_yield val[1]
                    
    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 303)
  def _reduce_62(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 309)
  def _reduce_64(val, _values, result)
                          result = s(:masgn, s(:array, val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 314)
  def _reduce_65(val, _values, result)
                          result = s(:masgn, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 318)
  def _reduce_66(val, _values, result)
                          result = s(:masgn, val[0] << val[1].compact)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 322)
  def _reduce_67(val, _values, result)
                          result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 326)
  def _reduce_68(val, _values, result)
                          result = s(:masgn, val[0] << s(:splat))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 330)
  def _reduce_69(val, _values, result)
                          result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 334)
  def _reduce_70(val, _values, result)
                          result = s(:masgn, s(:array, s(:splat)))
                    
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 340)
  def _reduce_72(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 345)
  def _reduce_73(val, _values, result)
                          result = s(:array, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 349)
  def _reduce_74(val, _values, result)
                          result = val[0] << val[1].compact
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 354)
  def _reduce_75(val, _values, result)
                          result = self.assignable val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 358)
  def _reduce_76(val, _values, result)
                          result = self.aryset val[0], val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 362)
  def _reduce_77(val, _values, result)
                          result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 366)
  def _reduce_78(val, _values, result)
                          result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 370)
  def _reduce_79(val, _values, result)
                          result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 374)
  def _reduce_80(val, _values, result)
                          if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 382)
  def _reduce_81(val, _values, result)
                          if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 390)
  def _reduce_82(val, _values, result)
                          self.backref_assign_error val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 395)
  def _reduce_83(val, _values, result)
                          result = self.assignable val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 399)
  def _reduce_84(val, _values, result)
                          result = self.aryset val[0], val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 403)
  def _reduce_85(val, _values, result)
                          result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 407)
  def _reduce_86(val, _values, result)
                          result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 411)
  def _reduce_87(val, _values, result)
                          result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 415)
  def _reduce_88(val, _values, result)
                          if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 423)
  def _reduce_89(val, _values, result)
                          if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 431)
  def _reduce_90(val, _values, result)
                          self.backref_assign_error val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 436)
  def _reduce_91(val, _values, result)
                          yyerror "class/module name must be CONSTANT"
                    
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 442)
  def _reduce_93(val, _values, result)
                          result = s(:colon3, val[1].to_sym)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 446)
  def _reduce_94(val, _values, result)
                          result = val[0].to_sym
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 450)
  def _reduce_95(val, _values, result)
                          result = s(:colon2, val[0], val[2].to_sym)
                    
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 456)
  def _reduce_99(val, _values, result)
                          lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 462)
  def _reduce_100(val, _values, result)
                          lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 468)
  def _reduce_103(val, _values, result)
     result = s(:lit, val[0].to_sym) 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 473)
  def _reduce_105(val, _values, result)
                          result = new_undef val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 478)
  def _reduce_106(val, _values, result)
                          lexer.lex_state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 482)
  def _reduce_107(val, _values, result)
                          result = new_undef val[0], val[3]
                    
    result
  end
.,.,

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 501)
  def _reduce_175(val, _values, result)
                          result = self.node_assign val[0], val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 505)
  def _reduce_176(val, _values, result)
                          result = self.node_assign val[0], s(:rescue, val[2], s(:resbody, s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 510)
  def _reduce_177(val, _values, result)
                          result = new_op_asgn val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 514)
  def _reduce_178(val, _values, result)
                          result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 519)
  def _reduce_179(val, _values, result)
                          result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 523)
  def _reduce_180(val, _values, result)
                          result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 527)
  def _reduce_181(val, _values, result)
                          result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 532)
  def _reduce_182(val, _values, result)
                          yyerror "constant re-assignment"
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 536)
  def _reduce_183(val, _values, result)
                          yyerror "constant re-assignment"
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 540)
  def _reduce_184(val, _values, result)
                          self.backref_assign_error val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 544)
  def _reduce_185(val, _values, result)
                          v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 553)
  def _reduce_186(val, _values, result)
                          v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 562)
  def _reduce_187(val, _values, result)
                          result = new_call val[0], :+, s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 566)
  def _reduce_188(val, _values, result)
                          result = new_call val[0], :-, s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 570)
  def _reduce_189(val, _values, result)
                          result = new_call val[0], :*, s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 574)
  def _reduce_190(val, _values, result)
                          result = new_call val[0], :"/", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 578)
  def _reduce_191(val, _values, result)
                          result = new_call val[0], :%, s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 582)
  def _reduce_192(val, _values, result)
                          result = new_call val[0], :**, s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 586)
  def _reduce_193(val, _values, result)
                          result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 590)
  def _reduce_194(val, _values, result)
                          result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 594)
  def _reduce_195(val, _values, result)
                          if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@", s(:arglist)
                      end
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 602)
  def _reduce_196(val, _values, result)
                          result = new_call val[1], :"-@", s(:arglist)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 606)
  def _reduce_197(val, _values, result)
                          result = new_call val[0], :"|", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 610)
  def _reduce_198(val, _values, result)
                          result = new_call val[0], :"^", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 614)
  def _reduce_199(val, _values, result)
                          result = new_call val[0], :"&", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 618)
  def _reduce_200(val, _values, result)
                          result = new_call val[0], :"<=>", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 622)
  def _reduce_201(val, _values, result)
                          result = new_call val[0], :">", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 626)
  def _reduce_202(val, _values, result)
                          result = new_call val[0], :">=", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 630)
  def _reduce_203(val, _values, result)
                          result = new_call val[0], :"<", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 634)
  def _reduce_204(val, _values, result)
                          result = new_call val[0], :"<=", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 638)
  def _reduce_205(val, _values, result)
                          result = new_call val[0], :"==", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 642)
  def _reduce_206(val, _values, result)
                          result = new_call val[0], :"===", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 646)
  def _reduce_207(val, _values, result)
                          val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 652)
  def _reduce_208(val, _values, result)
                          result = self.get_match_node val[0], val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 656)
  def _reduce_209(val, _values, result)
                          result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 660)
  def _reduce_210(val, _values, result)
                          result = s(:not, val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 664)
  def _reduce_211(val, _values, result)
                          val[2] = value_expr val[2]
                      result = new_call val[1], :"~", s(:arglist)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 669)
  def _reduce_212(val, _values, result)
                          val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 675)
  def _reduce_213(val, _values, result)
                          val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", s(:arglist, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 681)
  def _reduce_214(val, _values, result)
                          result = logop(:and, val[0], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 685)
  def _reduce_215(val, _values, result)
                          result = logop(:or, val[0], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 689)
  def _reduce_216(val, _values, result)
                          result = s(:defined, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 693)
  def _reduce_217(val, _values, result)
                          result = s(:if, val[0], val[2], val[4])
                    
    result
  end
.,.,

# reduce 218 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 699)
  def _reduce_219(val, _values, result)
                          result = value_expr(val[0])
                    
    result
  end
.,.,

# reduce 220 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 705)
  def _reduce_221(val, _values, result)
                          warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 710)
  def _reduce_222(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 714)
  def _reduce_223(val, _values, result)
                          result = self.arg_concat val[0], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 718)
  def _reduce_224(val, _values, result)
                          result = s(:array, s(:hash, *val[0].values))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 722)
  def _reduce_225(val, _values, result)
                          result = s(:array, s(:splat, val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 727)
  def _reduce_226(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 731)
  def _reduce_227(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 735)
  def _reduce_228(val, _values, result)
                          warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 740)
  def _reduce_229(val, _values, result)
                          warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
  end
.,.,

# reduce 230 omitted

# reduce 231 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 749)
  def _reduce_232(val, _values, result)
                          warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 754)
  def _reduce_233(val, _values, result)
                          result = self.arg_blk_pass val[0], val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 758)
  def _reduce_234(val, _values, result)
                          result = self.arg_concat val[0], val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 763)
  def _reduce_235(val, _values, result)
                          result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 768)
  def _reduce_236(val, _values, result)
                          result = self.arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 773)
  def _reduce_237(val, _values, result)
                          result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 778)
  def _reduce_238(val, _values, result)
                          val[0] << s(:hash, *val[2].values)
                      result = self.arg_concat val[0], val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 784)
  def _reduce_239(val, _values, result)
                          result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
  end
.,.,

# reduce 240 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 790)
  def _reduce_241(val, _values, result)
                          args = self.list_prepend val[0], val[2]
                      result = self.arg_blk_pass args, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 795)
  def _reduce_242(val, _values, result)
                          result = self.arg_blk_pass val[0], val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 799)
  def _reduce_243(val, _values, result)
                          result = self.arg_concat s(:array, val[0]), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 804)
  def _reduce_244(val, _values, result)
                          result = self.arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 809)
  def _reduce_245(val, _values, result)
                          result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 814)
  def _reduce_246(val, _values, result)
                          result = s(:array, s(:hash, *val[0].values), val[3])
                      result = self.arg_blk_pass result, val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 819)
  def _reduce_247(val, _values, result)
                          result = s(:array, val[0], s(:hash, *val[2].values))
                      result = self.arg_blk_pass result, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 824)
  def _reduce_248(val, _values, result)
                          result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values))
                      result = self.arg_blk_pass result, val[5]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 829)
  def _reduce_249(val, _values, result)
                          result = self.arg_concat s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 834)
  def _reduce_250(val, _values, result)
                          result = self.arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = self.arg_blk_pass result, val[8]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 839)
  def _reduce_251(val, _values, result)
                          result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
  end
.,.,

# reduce 252 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 844)
  def _reduce_253(val, _values, result)
                          result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 849)
  def _reduce_254(val, _values, result)
                          lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
  end
.,.,

# reduce 255 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 856)
  def _reduce_256(val, _values, result)
                          lexer.lex_state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 860)
  def _reduce_257(val, _values, result)
                          warning "don't put space before argument parentheses"
                      result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 865)
  def _reduce_258(val, _values, result)
                          lexer.lex_state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 869)
  def _reduce_259(val, _values, result)
                          warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 875)
  def _reduce_260(val, _values, result)
                          result = s(:block_pass, val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 880)
  def _reduce_261(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 262 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 886)
  def _reduce_263(val, _values, result)
                          result = s(:array, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 890)
  def _reduce_264(val, _values, result)
                          result = self.list_append val[0], val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 895)
  def _reduce_265(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 899)
  def _reduce_266(val, _values, result)
                          result = self.arg_concat val[0], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 903)
  def _reduce_267(val, _values, result)
                          result = s(:splat, val[1])
                    
    result
  end
.,.,

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 916)
  def _reduce_276(val, _values, result)
                          result = new_call nil, val[0].to_sym
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 920)
  def _reduce_277(val, _values, result)
                          result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 924)
  def _reduce_278(val, _values, result)
                          unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 934)
  def _reduce_279(val, _values, result)
                          lexer.lex_state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 938)
  def _reduce_280(val, _values, result)
                          warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 943)
  def _reduce_281(val, _values, result)
                          result = val[1] || s(:nil)
                      result.paren = true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 948)
  def _reduce_282(val, _values, result)
                          result = s(:colon2, val[0], val[2].to_sym)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 952)
  def _reduce_283(val, _values, result)
                          result = s(:colon3, val[1].to_sym)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 956)
  def _reduce_284(val, _values, result)
                          result = new_aref val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 960)
  def _reduce_285(val, _values, result)
                          result = val[1] || s(:array)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 964)
  def _reduce_286(val, _values, result)
                          result = s(:hash, *val[1].values)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 968)
  def _reduce_287(val, _values, result)
                          result = s(:return)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 972)
  def _reduce_288(val, _values, result)
                          result = new_yield val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 976)
  def _reduce_289(val, _values, result)
                          result = new_yield
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 980)
  def _reduce_290(val, _values, result)
                          result = new_yield
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 984)
  def _reduce_291(val, _values, result)
                          result = s(:defined, val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 988)
  def _reduce_292(val, _values, result)
                          oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
  end
.,.,

# reduce 293 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 997)
  def _reduce_294(val, _values, result)
                          call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1003)
  def _reduce_295(val, _values, result)
                          result = new_if val[1], val[3], val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1007)
  def _reduce_296(val, _values, result)
                          result = new_if val[1], val[4], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1011)
  def _reduce_297(val, _values, result)
                          lexer.cond.push true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1015)
  def _reduce_298(val, _values, result)
                          lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1019)
  def _reduce_299(val, _values, result)
                          result = new_while val[5], val[2], true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1023)
  def _reduce_300(val, _values, result)
                          lexer.cond.push true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1027)
  def _reduce_301(val, _values, result)
                          lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1031)
  def _reduce_302(val, _values, result)
                          result = new_until val[5], val[2], true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1035)
  def _reduce_303(val, _values, result)
                          result = new_case val[1], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1039)
  def _reduce_304(val, _values, result)
                          result = new_case nil, val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1043)
  def _reduce_305(val, _values, result)
                          result = new_case nil, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1047)
  def _reduce_306(val, _values, result)
                          lexer.cond.push true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1051)
  def _reduce_307(val, _values, result)
                          lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1055)
  def _reduce_308(val, _values, result)
                          result = new_for val[4], val[1], val[7]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1059)
  def _reduce_309(val, _values, result)
                          result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1063)
  def _reduce_310(val, _values, result)
                          self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1071)
  def _reduce_311(val, _values, result)
                          result = new_class val
                      self.env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1076)
  def _reduce_312(val, _values, result)
                          result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1080)
  def _reduce_313(val, _values, result)
                          result = self.in_def
                      self.in_def = false
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1085)
  def _reduce_314(val, _values, result)
                          result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1091)
  def _reduce_315(val, _values, result)
                          result = new_sclass val
                      self.env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1096)
  def _reduce_316(val, _values, result)
                          result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1100)
  def _reduce_317(val, _values, result)
                          self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1108)
  def _reduce_318(val, _values, result)
                          result = new_module val
                      self.env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1113)
  def _reduce_319(val, _values, result)
                          self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = lexer.lineno, lexer.src.beginning_of_line?
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1120)
  def _reduce_320(val, _values, result)
                          result = new_defn val
                      self.env.unextend
                      self.in_def = false
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1126)
  def _reduce_321(val, _values, result)
                          self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1131)
  def _reduce_322(val, _values, result)
                          self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1137)
  def _reduce_323(val, _values, result)
                          result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1144)
  def _reduce_324(val, _values, result)
                          result = s(:break)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1148)
  def _reduce_325(val, _values, result)
                          result = s(:next)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1152)
  def _reduce_326(val, _values, result)
                          result = s(:redo)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1156)
  def _reduce_327(val, _values, result)
                          result = s(:retry)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1161)
  def _reduce_328(val, _values, result)
                          result = value_expr(val[0])
                    
    result
  end
.,.,

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1176)
  def _reduce_337(val, _values, result)
                          result = s(:if, val[1], val[3], val[4])
                    
    result
  end
.,.,

# reduce 338 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1182)
  def _reduce_339(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 340 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1188)
  def _reduce_341(val, _values, result)
                          val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
  end
.,.,

# reduce 342 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1194)
  def _reduce_343(val, _values, result)
                          result = 0
                      self.lexer.command_start = true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1199)
  def _reduce_344(val, _values, result)
                          result = 0
                      self.lexer.command_start = true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1204)
  def _reduce_345(val, _values, result)
                          result = val[1]
                      self.lexer.command_start = true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1210)
  def _reduce_346(val, _values, result)
                          self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1215)
  def _reduce_347(val, _values, result)
                          result = self.env.dynamic.keys
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1219)
  def _reduce_348(val, _values, result)
                          vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1229)
  def _reduce_349(val, _values, result)
                          raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1237)
  def _reduce_350(val, _values, result)
                          result = new_call val[0], val[2], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1241)
  def _reduce_351(val, _values, result)
                          result = new_call val[0], val[2], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1246)
  def _reduce_352(val, _values, result)
                          result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1250)
  def _reduce_353(val, _values, result)
                          result = new_call nil, val[0].to_sym, val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1254)
  def _reduce_354(val, _values, result)
                          result = new_call val[0], val[2].to_sym, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1258)
  def _reduce_355(val, _values, result)
                          result = new_call val[0], val[2].to_sym, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1262)
  def _reduce_356(val, _values, result)
                          result = new_call val[0], val[2].to_sym
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1266)
  def _reduce_357(val, _values, result)
                          result = new_super val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1270)
  def _reduce_358(val, _values, result)
                          result = s(:zsuper)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1275)
  def _reduce_359(val, _values, result)
                          self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1280)
  def _reduce_360(val, _values, result)
                          result = self.env.dynamic.keys
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1284)
  def _reduce_361(val, _values, result)
                          # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1293)
  def _reduce_362(val, _values, result)
                          self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1298)
  def _reduce_363(val, _values, result)
                          result = self.env.dynamic.keys
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1302)
  def _reduce_364(val, _values, result)
                          args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1311)
  def _reduce_365(val, _values, result)
                          result = self.lexer.lineno
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1315)
  def _reduce_366(val, _values, result)
                          result = s(:when, val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
  end
.,.,

# reduce 367 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1323)
  def _reduce_368(val, _values, result)
                          result = self.list_append val[0], s(:when, val[3], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1327)
  def _reduce_369(val, _values, result)
                          result = s(:array, s(:when, val[1], nil))
                    
    result
  end
.,.,

# reduce 370 omitted

# reduce 371 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1334)
  def _reduce_372(val, _values, result)
                          klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = s(:resbody, klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1344)
  def _reduce_373(val, _values, result)
                          result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1349)
  def _reduce_374(val, _values, result)
                          result = s(:array, val[0])
                    
    result
  end
.,.,

# reduce 375 omitted

# reduce 376 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1356)
  def _reduce_377(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 378 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1362)
  def _reduce_379(val, _values, result)
                          if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
  end
.,.,

# reduce 380 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1370)
  def _reduce_381(val, _values, result)
     result = s(:lit, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1371)
  def _reduce_382(val, _values, result)
     result = s(:lit, val[0]) 
    result
  end
.,.,

# reduce 383 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1376)
  def _reduce_384(val, _values, result)
                          val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
  end
.,.,

# reduce 385 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1383)
  def _reduce_386(val, _values, result)
                          result = self.literal_concat val[0], val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1388)
  def _reduce_387(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1392)
  def _reduce_388(val, _values, result)
                          result = s(:str, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1397)
  def _reduce_389(val, _values, result)
                          result = new_xstring val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1402)
  def _reduce_390(val, _values, result)
                          result = new_regexp val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1407)
  def _reduce_391(val, _values, result)
                          result = s(:array)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1411)
  def _reduce_392(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1416)
  def _reduce_393(val, _values, result)
                          result = s(:array)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1420)
  def _reduce_394(val, _values, result)
                          word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
  end
.,.,

# reduce 395 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1427)
  def _reduce_396(val, _values, result)
                          result = self.literal_concat val[0], val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1432)
  def _reduce_397(val, _values, result)
                          result = s(:array)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1436)
  def _reduce_398(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1441)
  def _reduce_399(val, _values, result)
                          result = s(:array)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1445)
  def _reduce_400(val, _values, result)
                          result = val[0] << s(:str, val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1450)
  def _reduce_401(val, _values, result)
                          result = s(:str, "")
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1454)
  def _reduce_402(val, _values, result)
                          result = literal_concat(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1459)
  def _reduce_403(val, _values, result)
                          result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1463)
  def _reduce_404(val, _values, result)
                          result = literal_concat(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1468)
  def _reduce_405(val, _values, result)
                          result = s(:str, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1472)
  def _reduce_406(val, _values, result)
                          result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1478)
  def _reduce_407(val, _values, result)
                          lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1483)
  def _reduce_408(val, _values, result)
                          result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1491)
  def _reduce_409(val, _values, result)
                          lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1510)
  def _reduce_410(val, _values, result)
     result = s(:gvar, val[0].to_sym) 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1511)
  def _reduce_411(val, _values, result)
     result = s(:ivar, val[0].to_sym) 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1512)
  def _reduce_412(val, _values, result)
     result = s(:cvar, val[0].to_sym) 
    result
  end
.,.,

# reduce 413 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1518)
  def _reduce_414(val, _values, result)
                          lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1523)
  def _reduce_415(val, _values, result)
                          result = val[0].to_sym
                    
    result
  end
.,.,

# reduce 416 omitted

# reduce 417 omitted

# reduce 418 omitted

# reduce 419 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1530)
  def _reduce_420(val, _values, result)
                          lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
  end
.,.,

# reduce 421 omitted

# reduce 422 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1550)
  def _reduce_423(val, _values, result)
                          result = -val[1] # TODO: pt_testcase
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1554)
  def _reduce_424(val, _values, result)
                          result = -val[1] # TODO: pt_testcase
                    
    result
  end
.,.,

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1562)
  def _reduce_430(val, _values, result)
     result = :nil      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1563)
  def _reduce_431(val, _values, result)
     result = :self     
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1564)
  def _reduce_432(val, _values, result)
     result = :true     
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1565)
  def _reduce_433(val, _values, result)
     result = :false    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1566)
  def _reduce_434(val, _values, result)
     result = :__FILE__ 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1567)
  def _reduce_435(val, _values, result)
     result = :__LINE__ 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1571)
  def _reduce_436(val, _values, result)
                          result = self.gettable val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1576)
  def _reduce_437(val, _values, result)
                          result = self.assignable val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1579)
  def _reduce_438(val, _values, result)
     result = s(:nth_ref,  val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1580)
  def _reduce_439(val, _values, result)
     result = s(:back_ref, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1584)
  def _reduce_440(val, _values, result)
                          result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1588)
  def _reduce_441(val, _values, result)
                          lexer.lex_state = :expr_beg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1592)
  def _reduce_442(val, _values, result)
                          result = val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1596)
  def _reduce_443(val, _values, result)
                          yyerrok
                      result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1602)
  def _reduce_444(val, _values, result)
                          result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1608)
  def _reduce_445(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1613)
  def _reduce_446(val, _values, result)
                          result = args val[0], val[2], val[4], val[5]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1617)
  def _reduce_447(val, _values, result)
                          result = args val[0], val[2],    nil, val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1621)
  def _reduce_448(val, _values, result)
                          result = args val[0],    nil, val[2], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1625)
  def _reduce_449(val, _values, result)
                          result = args val[0],    nil,    nil, val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1629)
  def _reduce_450(val, _values, result)
                          result = args    nil, val[0], val[2], val[3]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1633)
  def _reduce_451(val, _values, result)
                          result = args    nil, val[0],    nil, val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1637)
  def _reduce_452(val, _values, result)
                          result = args    nil,    nil, val[0], val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1641)
  def _reduce_453(val, _values, result)
                          result = args    nil,    nil,    nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1645)
  def _reduce_454(val, _values, result)
                          result = args    nil,    nil,    nil,    nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1650)
  def _reduce_455(val, _values, result)
                          yyerror "formal argument cannot be a constant: #{val[0]}"
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1654)
  def _reduce_456(val, _values, result)
                          yyerror "formal argument cannot be an instance variable"
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1658)
  def _reduce_457(val, _values, result)
                          yyerror "formal argument cannot be a class variable"
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1662)
  def _reduce_458(val, _values, result)
                          identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1670)
  def _reduce_459(val, _values, result)
                          result = s(:args)
                      result << val[0].to_sym
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1675)
  def _reduce_460(val, _values, result)
                          val[0] << val[2].to_sym
                      result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1681)
  def _reduce_461(val, _values, result)
                          result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1687)
  def _reduce_462(val, _values, result)
                          result = s(:block, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1691)
  def _reduce_463(val, _values, result)
                          result = self.block_append val[0], val[2]
                    
    result
  end
.,.,

# reduce 464 omitted

# reduce 465 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1698)
  def _reduce_466(val, _values, result)
                          # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1705)
  def _reduce_467(val, _values, result)
                          name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
  end
.,.,

# reduce 468 omitted

# reduce 469 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1714)
  def _reduce_470(val, _values, result)
                          identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1722)
  def _reduce_471(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1726)
  def _reduce_472(val, _values, result)
                          result = nil
                    
    result
  end
.,.,

# reduce 473 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1732)
  def _reduce_474(val, _values, result)
                          lexer.lex_state = :expr_beg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1736)
  def _reduce_475(val, _values, result)
                          result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1743)
  def _reduce_476(val, _values, result)
                          result = s(:array)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1747)
  def _reduce_477(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1751)
  def _reduce_478(val, _values, result)
                          size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
  end
.,.,

# reduce 479 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1761)
  def _reduce_480(val, _values, result)
                          list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1769)
  def _reduce_481(val, _values, result)
                          result = s(:array, s(:lit, val[0][0..-2].to_sym), val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1773)
  def _reduce_482(val, _values, result)
                          result = s(:array, val[0], val[2])
                    
    result
  end
.,.,

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1784)
  def _reduce_502(val, _values, result)
     yyerrok 
    result
  end
.,.,

# reduce 503 omitted

# reduce 504 omitted

module_eval(<<'.,.,', 'ruby_parser.y', 1788)
  def _reduce_505(val, _values, result)
     yyerrok 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1790)
  def _reduce_506(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.y', 1792)
  def _reduce_507(val, _values, result)
     result = nil 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
